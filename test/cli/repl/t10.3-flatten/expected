welcome to iREPL
ok, loaded 24 functions from data/libs/prelude.icicle
ok, loaded test/cli/repl/data.psv, 13 rows
> -- Show everything
> ok, core-simp is now on
ok, flatten is now on
> > -- A rather complicated feature to convert to Avalanche
> - Flattened:
conv$3 = TIME
init acc$conv$10$simp$16@{Error} = ExceptNotAnError@{Error};
init acc$c$conv$11$simp$21@{Error} = ExceptNotAnError@{Error};
init acc$c$conv$11$simp$22@{Int} = 0@{Int};
init acc$conv$26$simp$23@{Buf 3 FactIdentifier} = Buf []@{Buf 3 FactIdentifier};
init acc$conv$26$simp$24@{Buf 3 Error} = Buf []@{Buf 3 Error};
init acc$conv$26$simp$25@{Buf 3 Int} = Buf []@{Buf 3 Int};
load_resumable@{Buf 3 FactIdentifier} acc$conv$26$simp$23;
load_resumable@{Buf 3 Error} acc$conv$26$simp$24;
load_resumable@{Buf 3 Int} acc$conv$26$simp$25;
load_resumable@{Error} acc$c$conv$11$simp$21;
load_resumable@{Int} acc$c$conv$11$simp$22;
load_resumable@{Error} acc$conv$10$simp$16;
for_facts (conv$2@{Time}, conv$1@{FactIdentifier}, conv$0$simp$68@{Error}, conv$0$simp$69@{Int}, conv$0$simp$70@{Time}) in new
{
  init flat$0$simp$26@{Error} = ExceptNotAnError@{Error};
  init flat$0$simp$27@{Bool} = False@{Bool};
  if (eq#@{Error} conv$0$simp$68 (ExceptNotAnError@{Error}))
  {
    write flat$0$simp$26 = ExceptNotAnError@{Error};
    write flat$0$simp$27 = gt#@{Int} conv$0$simp$69 (10@{Int});
  }
  else
  {
    write flat$0$simp$26 = conv$0$simp$68;
    write flat$0$simp$27 = False@{Bool};
  }
  read flat$0$simp$28 = flat$0$simp$26 [Error];
  read flat$0$simp$29 = flat$0$simp$27 [Bool];
  init flat$1@{Bool} = False@{Bool};
  if (eq#@{Error} flat$0$simp$28 (ExceptNotAnError@{Error}))
  {
    write flat$1 = flat$0$simp$29;
  }
  else
  {
    write flat$1 = True@{Bool};
  }
  read flat$1 = flat$1 [Bool];
  if (flat$1)
  {
    write acc$conv$10$simp$16 = conv$0$simp$68;
    read conv$10$aval$1$simp$30 = acc$conv$10$simp$16 [Error];
    read c$conv$11$aval$0$simp$35 = acc$c$conv$11$simp$21 [Error];
    read c$conv$11$aval$0$simp$36 = acc$c$conv$11$simp$22 [Int];
    init flat$2$simp$37@{Error} = ExceptNotAnError@{Error};
    init flat$2$simp$38@{Int} = 0@{Int};
    if (eq#@{Error} conv$10$aval$1$simp$30 (ExceptNotAnError@{Error}))
    {
      init flat$5$simp$39@{Error} = ExceptNotAnError@{Error};
      init flat$5$simp$40@{Int} = 0@{Int};
      if (eq#@{Error} c$conv$11$aval$0$simp$35 (ExceptNotAnError@{Error}))
      {
        write flat$5$simp$39 = ExceptNotAnError@{Error};
        write flat$5$simp$40 = add#@{Int} c$conv$11$aval$0$simp$36 (1@{Int});
      }
      else
      {
        write flat$5$simp$39 = c$conv$11$aval$0$simp$35;
        write flat$5$simp$40 = 0@{Int};
      }
      read flat$5$simp$41 = flat$5$simp$39 [Error];
      read flat$5$simp$42 = flat$5$simp$40 [Int];
      init flat$6$simp$43@{Error} = ExceptNotAnError@{Error};
      init flat$6$simp$44@{Int} = 0@{Int};
      if (eq#@{Error} flat$5$simp$41 (ExceptNotAnError@{Error}))
      {
        write flat$6$simp$43 = ExceptNotAnError@{Error};
        write flat$6$simp$44 = flat$5$simp$42;
      }
      else
      {
        write flat$6$simp$43 = flat$5$simp$41;
        write flat$6$simp$44 = 0@{Int};
      }
      read flat$6$simp$45 = flat$6$simp$43 [Error];
      read flat$6$simp$46 = flat$6$simp$44 [Int];
      write flat$2$simp$37 = flat$6$simp$45;
      write flat$2$simp$38 = flat$6$simp$46;
    }
    else
    {
      write flat$2$simp$37 = conv$10$aval$1$simp$30;
      write flat$2$simp$38 = 0@{Int};
    }
    read flat$2$simp$47 = flat$2$simp$37 [Error];
    read flat$2$simp$48 = flat$2$simp$38 [Int];
    write acc$c$conv$11$simp$21 = flat$2$simp$47;
    write acc$c$conv$11$simp$22 = flat$2$simp$48;
  }
  read acc$conv$26$simp$23 = acc$conv$26$simp$23 [Buf 3 FactIdentifier];
  write acc$conv$26$simp$23 = Buf_push#@{Buf 3 FactIdentifier} acc$conv$26$simp$23 conv$1;
  read acc$conv$26$simp$24 = acc$conv$26$simp$24 [Buf 3 Error];
  write acc$conv$26$simp$24 = Buf_push#@{Buf 3 Error} acc$conv$26$simp$24 conv$0$simp$68;
  read acc$conv$26$simp$25 = acc$conv$26$simp$25 [Buf 3 Int];
  write acc$conv$26$simp$25 = Buf_push#@{Buf 3 Int} acc$conv$26$simp$25 conv$0$simp$69;
}
read acc$conv$26$flat$16$simp$52 = acc$conv$26$simp$23 [Buf 3 FactIdentifier];
let flat$17 = Buf_read#@{Array FactIdentifier} acc$conv$26$flat$16$simp$52;
foreach (flat$18 in 0@{Int} .. Array_length#@{FactIdentifier} flat$17)
{
  keep_fact_in_history unsafe_Array_index#@{FactIdentifier} flat$17 flat$18;
}
save_resumable@{Buf 3 FactIdentifier} acc$conv$26$simp$23;
save_resumable@{Buf 3 Error} acc$conv$26$simp$24;
save_resumable@{Buf 3 Int} acc$conv$26$simp$25;
save_resumable@{Error} acc$c$conv$11$simp$21;
save_resumable@{Int} acc$c$conv$11$simp$22;
save_resumable@{Error} acc$conv$10$simp$16;
read conv$26$simp$56 = acc$conv$26$simp$24 [Buf 3 Error];
read conv$26$simp$57 = acc$conv$26$simp$25 [Buf 3 Int];
read c$conv$11$simp$58 = acc$c$conv$11$simp$21 [Error];
read c$conv$11$simp$59 = acc$c$conv$11$simp$22 [Int];
init flat$23$simp$60@{Error} = ExceptNotAnError@{Error};
init flat$23$simp$61@{Int} = 0@{Int};
init flat$23$simp$62@{Array Error} = []@{Array Error};
init flat$23$simp$63@{Array Int} = []@{Array Int};
if (eq#@{Error} c$conv$11$simp$58 (ExceptNotAnError@{Error}))
{
  write flat$23$simp$60 = ExceptNotAnError@{Error};
  write flat$23$simp$61 = c$conv$11$simp$59;
  write flat$23$simp$62 = Buf_read#@{Array Error} conv$26$simp$56;
  write flat$23$simp$63 = Buf_read#@{Array Int} conv$26$simp$57;
}
else
{
  write flat$23$simp$60 = c$conv$11$simp$58;
  write flat$23$simp$61 = 0@{Int};
  write flat$23$simp$62 = unsafe_Array_create#@{Error} (0@{Int});
  write flat$23$simp$63 = unsafe_Array_create#@{Int} (0@{Int});
}
read flat$23$simp$64 = flat$23$simp$60 [Error];
read flat$23$simp$65 = flat$23$simp$61 [Int];
read flat$23$simp$66 = flat$23$simp$62 [Array Error];
read flat$23$simp$67 = flat$23$simp$63 [Array Int];
output@{(Sum Error (Int, Array (Sum Error Int)))} repl (flat$23$simp$64@{Error}, flat$23$simp$65@{Int}, flat$23$simp$66@{Array Error}, flat$23$simp$67@{Array Int});

- Core evaluation:
[homer, (5,[300,400,500])
,marge, (1,[0,10,20])]

> > -- Something involves the abstract buffer type
> - Flattened:
conv$3 = TIME
init acc$conv$4$simp$40@{Array Time} = []@{Array Time};
init acc$conv$4$simp$41@{Array (Buf 2 FactIdentifier)} = []@{Array (Buf 2 FactIdentifier)};
init acc$conv$4$simp$42@{Array (Buf 2 Error)} = []@{Array (Buf 2 Error)};
init acc$conv$4$simp$43@{Array (Buf 2 Int)} = []@{Array (Buf 2 Int)};
load_resumable@{Array Time} acc$conv$4$simp$40;
load_resumable@{Array (Buf 2 FactIdentifier)} acc$conv$4$simp$41;
load_resumable@{Array (Buf 2 Error)} acc$conv$4$simp$42;
load_resumable@{Array (Buf 2 Int)} acc$conv$4$simp$43;
for_facts (conv$2@{Time}, conv$1@{FactIdentifier}, conv$0$simp$117@{Error}, conv$0$simp$118@{Int}, conv$0$simp$119@{Time}) in new
{
  read conv$4$aval$0$simp$45 = acc$conv$4$simp$40 [Array Time];
  read conv$4$aval$0$simp$46 = acc$conv$4$simp$41 [Array (Buf 2 FactIdentifier)];
  read conv$4$aval$0$simp$47 = acc$conv$4$simp$42 [Array (Buf 2 Error)];
  read conv$4$aval$0$simp$48 = acc$conv$4$simp$43 [Array (Buf 2 Int)];
  let simp$543 = Buf_make#@{Buf 2 FactIdentifier} (()@{Unit});
  let simp$292 = Buf_push#@{Buf 2 FactIdentifier} simp$543 conv$1;
  let simp$545 = Buf_make#@{Buf 2 Error} (()@{Unit});
  let simp$295 = Buf_push#@{Buf 2 Error} simp$545 conv$0$simp$117;
  let simp$547 = Buf_make#@{Buf 2 Int} (()@{Unit});
  let simp$298 = Buf_push#@{Buf 2 Int} simp$547 conv$0$simp$118;
  init flat$1@{Bool} = False@{Bool};
  init flat$2@{Array Time} = conv$4$aval$0$simp$45;
  init flat$3$simp$50@{Array (Buf 2 FactIdentifier)} = conv$4$aval$0$simp$46;
  init flat$3$simp$51@{Array (Buf 2 Error)} = conv$4$aval$0$simp$47;
  init flat$3$simp$52@{Array (Buf 2 Int)} = conv$4$aval$0$simp$48;
  read flat$2 = flat$2 [Array Time];
  let flat$4 = Array_length#@{Time} flat$2;
  foreach (flat$5 in 0@{Int} .. flat$4)
  {
    read flat$2 = flat$2 [Array Time];
    read flat$3$simp$54 = flat$3$simp$50 [Array (Buf 2 FactIdentifier)];
    read flat$3$simp$55 = flat$3$simp$51 [Array (Buf 2 Error)];
    read flat$3$simp$56 = flat$3$simp$52 [Array (Buf 2 Int)];
    let simp$146 = unsafe_Array_index#@{Time} flat$2 flat$5;
    if (eq#@{Time} simp$146 conv$0$simp$119)
    {
      let simp$315 = unsafe_Array_index#@{Buf 2 FactIdentifier} flat$3$simp$54 flat$5;
      let simp$317 = unsafe_Array_index#@{Buf 2 Error} flat$3$simp$55 flat$5;
      let simp$319 = unsafe_Array_index#@{Buf 2 Int} flat$3$simp$56 flat$5;
      let simp$340 = Buf_push#@{Buf 2 FactIdentifier} simp$315 conv$1;
      let simp$343 = Buf_push#@{Buf 2 Error} simp$317 conv$0$simp$117;
      let simp$346 = Buf_push#@{Buf 2 Int} simp$319 conv$0$simp$118;
      write flat$3$simp$50 = Array_put#@{Buf 2 FactIdentifier} flat$3$simp$54 flat$5 simp$340;
      write flat$3$simp$51 = Array_put#@{Buf 2 Error} flat$3$simp$55 flat$5 simp$343;
      write flat$3$simp$52 = Array_put#@{Buf 2 Int} flat$3$simp$56 flat$5 simp$346;
      write flat$1 = True@{Bool};
    }
  }
  read flat$1 = flat$1 [Bool];
  if (flat$1)
  {
    
  }
  else
  {
    read flat$8 = flat$2 [Array Time];
    let simp$171 = Array_length#@{Time} flat$8;
    write flat$2 = Array_put#@{Time} flat$8 simp$171 conv$0$simp$119;
    read flat$9$simp$58 = flat$3$simp$50 [Array (Buf 2 FactIdentifier)];
    read flat$9$simp$59 = flat$3$simp$51 [Array (Buf 2 Error)];
    read flat$9$simp$60 = flat$3$simp$52 [Array (Buf 2 Int)];
    let simp$176 = Array_length#@{Buf 2 FactIdentifier} flat$9$simp$58;
    write flat$3$simp$50 = Array_put#@{Buf 2 FactIdentifier} flat$9$simp$58 simp$176 simp$292;
    write flat$3$simp$51 = Array_put#@{Buf 2 Error} flat$9$simp$59 simp$176 simp$295;
    write flat$3$simp$52 = Array_put#@{Buf 2 Int} flat$9$simp$60 simp$176 simp$298;
  }
  read flat$2 = flat$2 [Array Time];
  read flat$3$simp$62 = flat$3$simp$50 [Array (Buf 2 FactIdentifier)];
  read flat$3$simp$63 = flat$3$simp$51 [Array (Buf 2 Error)];
  read flat$3$simp$64 = flat$3$simp$52 [Array (Buf 2 Int)];
  write acc$conv$4$simp$40 = flat$2;
  write acc$conv$4$simp$41 = flat$3$simp$62;
  write acc$conv$4$simp$42 = flat$3$simp$63;
  write acc$conv$4$simp$43 = flat$3$simp$64;
}
read acc$conv$4$flat$11$simp$67 = acc$conv$4$simp$41 [Array (Buf 2 FactIdentifier)];
foreach (flat$13 in 0@{Int} .. Array_length#@{Buf 2 FactIdentifier} acc$conv$4$flat$11$simp$67)
{
  let simp$417 = unsafe_Array_index#@{Buf 2 FactIdentifier} acc$conv$4$flat$11$simp$67 flat$13;
  let flat$14 = Buf_read#@{Array FactIdentifier} simp$417;
  foreach (flat$15 in 0@{Int} .. Array_length#@{FactIdentifier} flat$14)
  {
    keep_fact_in_history unsafe_Array_index#@{FactIdentifier} flat$14 flat$15;
  }
}
save_resumable@{Array Time} acc$conv$4$simp$40;
save_resumable@{Array (Buf 2 FactIdentifier)} acc$conv$4$simp$41;
save_resumable@{Array (Buf 2 Error)} acc$conv$4$simp$42;
save_resumable@{Array (Buf 2 Int)} acc$conv$4$simp$43;
read conv$4$simp$71 = acc$conv$4$simp$40 [Array Time];
read conv$4$simp$73 = acc$conv$4$simp$42 [Array (Buf 2 Error)];
read conv$4$simp$74 = acc$conv$4$simp$43 [Array (Buf 2 Int)];
init flat$23$simp$76@{Error} = ExceptNotAnError@{Error};
init flat$23$simp$77@{Array Time} = []@{Array Time};
init flat$23$simp$78@{Array Int} = []@{Array Int};
foreach (flat$24 in 0@{Int} .. Array_length#@{Time} conv$4$simp$71)
{
  read flat$23$simp$79 = flat$23$simp$76 [Error];
  read flat$23$simp$80 = flat$23$simp$77 [Array Time];
  read flat$23$simp$81 = flat$23$simp$78 [Array Int];
  let simp$449 = unsafe_Array_index#@{Time} conv$4$simp$71 flat$24;
  let simp$453 = unsafe_Array_index#@{Buf 2 Error} conv$4$simp$73 flat$24;
  let simp$455 = unsafe_Array_index#@{Buf 2 Int} conv$4$simp$74 flat$24;
  init flat$26$simp$82@{Error} = ExceptNotAnError@{Error};
  init flat$26$simp$83@{Array Time} = []@{Array Time};
  init flat$26$simp$84@{Array Int} = []@{Array Int};
  if (eq#@{Error} flat$23$simp$79 (ExceptNotAnError@{Error}))
  {
    let simp$489 = Buf_read#@{Array Error} simp$453;
    let simp$491 = Buf_read#@{Array Int} simp$455;
    init flat$30$simp$87@{Error} = ExceptNotAnError@{Error};
    init flat$30$simp$88@{Int} = 0@{Int};
    foreach (flat$43 in 0@{Int} .. Array_length#@{Error} simp$489)
    {
      read flat$30$simp$91 = flat$30$simp$87 [Error];
      read flat$30$simp$92 = flat$30$simp$88 [Int];
      let simp$503 = unsafe_Array_index#@{Error} simp$489 flat$43;
      let simp$505 = unsafe_Array_index#@{Int} simp$491 flat$43;
      init flat$45$simp$93@{Error} = ExceptNotAnError@{Error};
      init flat$45$simp$94@{Int} = 0@{Int};
      if (eq#@{Error} simp$503 (ExceptNotAnError@{Error}))
      {
        init flat$48$simp$95@{Error} = ExceptNotAnError@{Error};
        init flat$48$simp$96@{Int} = 0@{Int};
        if (eq#@{Error} flat$30$simp$91 (ExceptNotAnError@{Error}))
        {
          write flat$48$simp$95 = ExceptNotAnError@{Error};
          write flat$48$simp$96 = add#@{Int} simp$505 flat$30$simp$92;
        }
        else
        {
          write flat$48$simp$95 = flat$30$simp$91;
          write flat$48$simp$96 = 0@{Int};
        }
        read flat$48$simp$97 = flat$48$simp$95 [Error];
        read flat$48$simp$98 = flat$48$simp$96 [Int];
        write flat$45$simp$93 = flat$48$simp$97;
        write flat$45$simp$94 = flat$48$simp$98;
      }
      else
      {
        write flat$45$simp$93 = simp$503;
        write flat$45$simp$94 = 0@{Int};
      }
      read flat$45$simp$99 = flat$45$simp$93 [Error];
      read flat$45$simp$100 = flat$45$simp$94 [Int];
      write flat$30$simp$87 = flat$45$simp$99;
      write flat$30$simp$88 = flat$45$simp$100;
    }
    read flat$30$simp$103 = flat$30$simp$87 [Error];
    read flat$30$simp$104 = flat$30$simp$88 [Int];
    init flat$31$simp$105@{Error} = ExceptNotAnError@{Error};
    init flat$31$simp$106@{Array Time} = []@{Array Time};
    init flat$31$simp$107@{Array Int} = []@{Array Int};
    if (eq#@{Error} flat$30$simp$103 (ExceptNotAnError@{Error}))
    {
      init flat$34@{Bool} = False@{Bool};
      init flat$35@{Array Time} = flat$23$simp$80;
      init flat$36@{Array Int} = flat$23$simp$81;
      read flat$35 = flat$35 [Array Time];
      let flat$37 = Array_length#@{Time} flat$35;
      foreach (flat$38 in 0@{Int} .. flat$37)
      {
        read flat$35 = flat$35 [Array Time];
        read flat$36 = flat$36 [Array Int];
        let simp$247 = unsafe_Array_index#@{Time} flat$35 flat$38;
        if (eq#@{Time} simp$247 simp$449)
        {
          let flat$39 = unsafe_Array_index#@{Int} flat$36 flat$38;
          write flat$36 = Array_put#@{Int} flat$36 flat$38 flat$39;
          write flat$34 = True@{Bool};
        }
      }
      read flat$34 = flat$34 [Bool];
      if (flat$34)
      {
        
      }
      else
      {
        read flat$40 = flat$35 [Array Time];
        let simp$248 = Array_length#@{Time} flat$40;
        write flat$35 = Array_put#@{Time} flat$40 simp$248 simp$449;
        read flat$41 = flat$36 [Array Int];
        let simp$249 = Array_length#@{Int} flat$41;
        write flat$36 = Array_put#@{Int} flat$41 simp$249 flat$30$simp$104;
      }
      read flat$35 = flat$35 [Array Time];
      read flat$36 = flat$36 [Array Int];
      write flat$31$simp$105 = ExceptNotAnError@{Error};
      write flat$31$simp$106 = flat$35;
      write flat$31$simp$107 = flat$36;
    }
    else
    {
      write flat$31$simp$105 = flat$30$simp$103;
      write flat$31$simp$106 = unsafe_Array_create#@{Time} (0@{Int});
      write flat$31$simp$107 = unsafe_Array_create#@{Int} (0@{Int});
    }
    read flat$31$simp$108 = flat$31$simp$105 [Error];
    read flat$31$simp$109 = flat$31$simp$106 [Array Time];
    read flat$31$simp$110 = flat$31$simp$107 [Array Int];
    write flat$26$simp$82 = flat$31$simp$108;
    write flat$26$simp$83 = flat$31$simp$109;
    write flat$26$simp$84 = flat$31$simp$110;
  }
  else
  {
    write flat$26$simp$82 = flat$23$simp$79;
    write flat$26$simp$83 = unsafe_Array_create#@{Time} (0@{Int});
    write flat$26$simp$84 = unsafe_Array_create#@{Int} (0@{Int});
  }
  read flat$26$simp$111 = flat$26$simp$82 [Error];
  read flat$26$simp$112 = flat$26$simp$83 [Array Time];
  read flat$26$simp$113 = flat$26$simp$84 [Array Int];
  write flat$23$simp$76 = flat$26$simp$111;
  write flat$23$simp$77 = flat$26$simp$112;
  write flat$23$simp$78 = flat$26$simp$113;
}
read flat$23$simp$114 = flat$23$simp$76 [Error];
read flat$23$simp$115 = flat$23$simp$77 [Array Time];
read flat$23$simp$116 = flat$23$simp$78 [Array Int];
output@{(Sum Error (Map Time Int))} repl (flat$23$simp$114@{Error}, flat$23$simp$115@{Array Time}, flat$23$simp$116@{Array Int});

- Core evaluation:
[homer, [(1989-12-17,100)
        ,(1990-01-01,200)
        ,(1994-01-01,300)
        ,(1999-01-01,400)
        ,(2010-01-01,500)]
,marge, [(1989-12-17,30)]]

> > > 