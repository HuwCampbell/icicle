welcome to iREPL
ok, loaded 20 functions from data/libs/prelude.icicle
ok, loaded test/cli/repl/data.psv, 13 rows
> -- Show everything
> ok, core-simp is now on
ok, flatten is now on
> > -- A rather complicated feature to convert to Avalanche
> - Flattened:
gen$date = DATE
{
  init acc$c$conv$13$simp$4@{Bool} = True@{Bool};
  init acc$c$conv$13$simp$5@{Error} = ExceptTombstone@{Error};
  init acc$c$conv$13$simp$6@{Int} = 0@{Int};
  init acc$conv$30$simp$7@{Buf 3 Bool} = Buf []@{Buf 3 Bool};
  init acc$conv$30$simp$8@{Buf 3 Error} = Buf []@{Buf 3 Error};
  init acc$conv$30$simp$9@{Buf 3 Int} = Buf []@{Buf 3 Int};
  load_resumable@{Bool} acc$c$conv$13$simp$4;
  load_resumable@{Error} acc$c$conv$13$simp$5;
  load_resumable@{Int} acc$c$conv$13$simp$6;
  load_resumable@{Buf 3 Bool} acc$conv$30$simp$7;
  load_resumable@{Buf 3 Error} acc$conv$30$simp$8;
  load_resumable@{Buf 3 Int} acc$conv$30$simp$9;
  for_facts (gen$fact$simp$58@{Bool},
             gen$fact$simp$59@{Error},
             gen$fact$simp$60@{Int},
             gen$fact$simp$61@{DateTime}) in new {
    read@{Buf 3 Bool} acc$conv$30$simp$10 = acc$conv$30$simp$7;
    read@{Buf 3 Error} acc$conv$30$simp$11 = acc$conv$30$simp$8;
    read@{Buf 3 Int} acc$conv$30$simp$12 = acc$conv$30$simp$9;
    write acc$conv$30$simp$7 = Buf_push#@{Buf 3 Bool}
                               acc$conv$30$simp$10
                               gen$fact$simp$58;
    write acc$conv$30$simp$8 = Buf_push#@{Buf 3 Error}
                               acc$conv$30$simp$11
                               gen$fact$simp$59;
    write acc$conv$30$simp$9 = Buf_push#@{Buf 3 Int}
                               acc$conv$30$simp$12
                               gen$fact$simp$60;
    init flat$1$simp$13@{Bool} = False@{Bool};
    init flat$1$simp$15@{Bool} = False@{Bool};
    if (gen$fact$simp$58) {
      write flat$1$simp$13 = True@{Bool};
      write flat$1$simp$15 = gt#@{Int}
                             gen$fact$simp$60 (10@{Int});
    } else {
      write flat$1$simp$13 = False@{Bool};
      write flat$1$simp$15 = False@{Bool};
    }
    read@{Bool} flat$1$simp$16 = flat$1$simp$13;
    read@{Bool} flat$1$simp$18 = flat$1$simp$15;
    init flat$2@{Bool} = False@{Bool};
    if (flat$1$simp$16) {
      write flat$2 = flat$1$simp$18;
    } 
     else {
      write flat$2 = True@{Bool};
    } 
    
    read@{Bool} flat$2 = flat$2;
    if (flat$2) {
      read@{Bool} acc$c$conv$13$simp$19 = acc$c$conv$13$simp$4;
      read@{Error} acc$c$conv$13$simp$20 = acc$c$conv$13$simp$5;
      read@{Int} acc$c$conv$13$simp$21 = acc$c$conv$13$simp$6;
      init flat$3$simp$22@{Bool} = False@{Bool};
      init flat$3$simp$23@{Error} = ExceptTombstone@{Error};
      init flat$3$simp$24@{Int} = 0@{Int};
      if (gen$fact$simp$58) {
        init flat$6$simp$25@{Bool} = False@{Bool};
        init flat$6$simp$26@{Error} = ExceptTombstone@{Error};
        init flat$6$simp$27@{Int} = 0@{Int};
        if (acc$c$conv$13$simp$19) {
          write flat$6$simp$25 = True@{Bool};
          write flat$6$simp$26 = ExceptTombstone@{Error};
          write flat$6$simp$27 = add#@{Int}
                                 acc$c$conv$13$simp$21 (1@{Int});
        } else {
          write flat$6$simp$25 = False@{Bool};
          write flat$6$simp$26 = acc$c$conv$13$simp$20;
          write flat$6$simp$27 = 0@{Int};
        }
        read@{Bool} flat$6$simp$28 = flat$6$simp$25;
        read@{Error} flat$6$simp$29 = flat$6$simp$26;
        read@{Int} flat$6$simp$30 = flat$6$simp$27;
        init flat$7$simp$31@{Bool} = False@{Bool};
        init flat$7$simp$32@{Error} = ExceptTombstone@{Error};
        init flat$7$simp$33@{Int} = 0@{Int};
        if (flat$6$simp$28) {
          write flat$7$simp$31 = True@{Bool};
          write flat$7$simp$32 = ExceptTombstone@{Error};
          write flat$7$simp$33 = flat$6$simp$30;
        } else {
          write flat$7$simp$31 = False@{Bool};
          write flat$7$simp$32 = flat$6$simp$29;
          write flat$7$simp$33 = 0@{Int};
        }
        read@{Bool} flat$7$simp$34 = flat$7$simp$31;
        read@{Error} flat$7$simp$35 = flat$7$simp$32;
        read@{Int} flat$7$simp$36 = flat$7$simp$33;
        write flat$3$simp$22 = flat$7$simp$34;
        write flat$3$simp$23 = flat$7$simp$35;
        write flat$3$simp$24 = flat$7$simp$36;
      } else {
        write flat$3$simp$22 = False@{Bool};
        write flat$3$simp$23 = gen$fact$simp$59;
        write flat$3$simp$24 = 0@{Int};
      }
      read@{Bool} flat$3$simp$37 = flat$3$simp$22;
      read@{Error} flat$3$simp$38 = flat$3$simp$23;
      read@{Int} flat$3$simp$39 = flat$3$simp$24;
      write acc$c$conv$13$simp$4 = flat$3$simp$37;
      write acc$c$conv$13$simp$5 = flat$3$simp$38;
      write acc$c$conv$13$simp$6 = flat$3$simp$39;
    }
  }
  save_resumable@{Bool} acc$c$conv$13$simp$4;
  save_resumable@{Error} acc$c$conv$13$simp$5;
  save_resumable@{Int} acc$c$conv$13$simp$6;
  save_resumable@{Buf 3 Bool} acc$conv$30$simp$7;
  save_resumable@{Buf 3 Error} acc$conv$30$simp$8;
  save_resumable@{Buf 3 Int} acc$conv$30$simp$9;
  read@{Bool} c$conv$13$simp$40 = acc$c$conv$13$simp$4;
  read@{Error} c$conv$13$simp$41 = acc$c$conv$13$simp$5;
  read@{Int} c$conv$13$simp$42 = acc$c$conv$13$simp$6;
  read@{Buf 3 Bool} conv$30$simp$43 = acc$conv$30$simp$7;
  read@{Buf 3 Error} conv$30$simp$44 = acc$conv$30$simp$8;
  read@{Buf 3 Int} conv$30$simp$45 = acc$conv$30$simp$9;
  init flat$16$simp$46@{Bool} = False@{Bool};
  init flat$16$simp$47@{Error} = ExceptTombstone@{Error};
  init flat$16$simp$48@{Int} = 0@{Int};
  init flat$16$simp$49@{Array Bool} = []@{Array Bool};
  init flat$16$simp$50@{Array Error} = []@{Array Error};
  init flat$16$simp$51@{Array Int} = []@{Array Int};
  if (c$conv$13$simp$40) {
    write flat$16$simp$46 = True@{Bool};
    write flat$16$simp$47 = ExceptTombstone@{Error};
    write flat$16$simp$48 = c$conv$13$simp$42;
    write flat$16$simp$49 = Buf_read#@{Array Bool}
                            conv$30$simp$43;
    write flat$16$simp$50 = Buf_read#@{Array Error}
                            conv$30$simp$44;
    write flat$16$simp$51 = Buf_read#@{Array Int}
                            conv$30$simp$45;
  } else {
    write flat$16$simp$46 = False@{Bool};
    write flat$16$simp$47 = c$conv$13$simp$41;
    write flat$16$simp$48 = 0@{Int};
    write flat$16$simp$49 = []@{Array Bool};
    write flat$16$simp$50 = []@{Array Error};
    write flat$16$simp$51 = []@{Array Int};
  }
  read@{Bool} flat$16$simp$52 = flat$16$simp$46;
  read@{Error} flat$16$simp$53 = flat$16$simp$47;
  read@{Int} flat$16$simp$54 = flat$16$simp$48;
  read@{Array Bool} flat$16$simp$55 = flat$16$simp$49;
  read@{Array Error} flat$16$simp$56 = flat$16$simp$50;
  read@{Array Int} flat$16$simp$57 = flat$16$simp$51;
  output@{(Sum Error (Int, Array (Sum Error Int)))} repl (flat$16$simp$52@{Bool},
               flat$16$simp$53@{Error},
               flat$16$simp$54@{Int},
               flat$16$simp$55@{Array Bool},
               flat$16$simp$56@{Array Error},
               flat$16$simp$57@{Array Int});
}

- Core evaluation:
[homer, (5,[300,400,500])
,marge, (1,[0,10,20])]

> > -- Something involves the abstract buffer type
> - Flattened:
gen$date = DATE
{
  init acc$conv$2$simp$14@{Array DateTime} = []@{Array DateTime};
  init acc$conv$2$simp$15@{Array (Buf 2 Bool)} = []@{Array (Buf 2 Bool)};
  init acc$conv$2$simp$16@{Array (Buf 2 Error)} = []@{Array (Buf 2 Error)};
  init acc$conv$2$simp$17@{Array (Buf 2 Int)} = []@{Array (Buf 2 Int)};
  load_resumable@{Array DateTime} acc$conv$2$simp$14;
  load_resumable@{Array (Buf 2 Bool)} acc$conv$2$simp$15;
  load_resumable@{Array (Buf 2 Error)} acc$conv$2$simp$16;
  load_resumable@{Array (Buf 2 Int)} acc$conv$2$simp$17;
  for_facts (gen$fact$simp$103@{Bool},
             gen$fact$simp$104@{Error},
             gen$fact$simp$105@{Int},
             gen$fact$simp$106@{DateTime}) in new {
    read@{Array DateTime} acc$conv$2$simp$19 = acc$conv$2$simp$14;
    read@{Array (Buf 2 Bool)} acc$conv$2$simp$20 = acc$conv$2$simp$15;
    read@{Array (Buf 2 Error)} acc$conv$2$simp$21 = acc$conv$2$simp$16;
    read@{Array (Buf 2 Int)} acc$conv$2$simp$22 = acc$conv$2$simp$17;
    let simp$121 = Buf_push#@{Buf 2 Bool}
                   (Buf []@{Buf 2 Bool}) gen$fact$simp$103;
    let simp$124 = Buf_push#@{Buf 2 Error}
                   (Buf []@{Buf 2 Error}) gen$fact$simp$104;
    let simp$127 = Buf_push#@{Buf 2 Int}
                   (Buf []@{Buf 2 Int}) gen$fact$simp$105;
    init flat$1@{Bool} = False@{Bool};
    init flat$2@{Array DateTime} = acc$conv$2$simp$19;
    init flat$3$simp$24@{Array (Buf 2 Bool)} = acc$conv$2$simp$20;
    init flat$3$simp$25@{Array (Buf 2 Error)} = acc$conv$2$simp$21;
    init flat$3$simp$26@{Array (Buf 2 Int)} = acc$conv$2$simp$22;
    read@{Array DateTime} flat$2 = flat$2;
    let flat$4 = Array_length#@{DateTime}
                 flat$2;
    foreach (flat$5 in 0@{Int}..flat$4) {
      read@{Array DateTime} flat$2 = flat$2;
      read@{Array (Buf 2 Bool)} flat$3$simp$28 = flat$3$simp$24;
      read@{Array (Buf 2 Error)} flat$3$simp$29 = flat$3$simp$25;
      read@{Array (Buf 2 Int)} flat$3$simp$30 = flat$3$simp$26;
      let simp$155 = unsafe_Array_index#@{DateTime}
                     flat$2 flat$5;
      if (eq#@{DateTime} simp$155
          gen$fact$simp$106) {
        let simp$170 = unsafe_Array_index#@{Buf 2 Bool}
                       flat$3$simp$28 flat$5;
        let simp$173 = unsafe_Array_index#@{Buf 2 Error}
                       flat$3$simp$29 flat$5;
        let simp$176 = unsafe_Array_index#@{Buf 2 Int}
                       flat$3$simp$30 flat$5;
        let simp$199 = Buf_push#@{Buf 2 Bool}
                       simp$170 gen$fact$simp$103;
        let simp$203 = Buf_push#@{Buf 2 Error}
                       simp$173 gen$fact$simp$104;
        let simp$207 = Buf_push#@{Buf 2 Int}
                       simp$176 gen$fact$simp$105;
        write flat$3$simp$24 = Array_put#@{Buf 2 Bool}
                               flat$3$simp$28 flat$5 simp$199;
        write flat$3$simp$25 = Array_put#@{Buf 2 Error}
                               flat$3$simp$29 flat$5 simp$203;
        write flat$3$simp$26 = Array_put#@{Buf 2 Int}
                               flat$3$simp$30 flat$5 simp$207;
        write flat$1 = True@{Bool};
      }
    }
    read@{Bool} flat$1 = flat$1;
    if (flat$1) {
      
    } else {
      read@{Array DateTime} flat$8 = flat$2;
      let simp$228 = Array_length#@{DateTime}
                     flat$8;
      write flat$2 = Array_put#@{DateTime} flat$8
                     simp$228 gen$fact$simp$106;
      read@{Array (Buf 2 Bool)} flat$9$simp$32 = flat$3$simp$24;
      read@{Array (Buf 2 Error)} flat$9$simp$33 = flat$3$simp$25;
      read@{Array (Buf 2 Int)} flat$9$simp$34 = flat$3$simp$26;
      let simp$233 = Array_length#@{Buf 2 Bool}
                     flat$9$simp$32;
      write flat$3$simp$24 = Array_put#@{Buf 2 Bool}
                             flat$9$simp$32 simp$233
                             simp$121;
      write flat$3$simp$25 = Array_put#@{Buf 2 Error}
                             flat$9$simp$33 simp$233
                             simp$124;
      write flat$3$simp$26 = Array_put#@{Buf 2 Int}
                             flat$9$simp$34 simp$233
                             simp$127;
    }
    read@{Array DateTime} flat$2 = flat$2;
    read@{Array (Buf 2 Bool)} flat$3$simp$36 = flat$3$simp$24;
    read@{Array (Buf 2 Error)} flat$3$simp$37 = flat$3$simp$25;
    read@{Array (Buf 2 Int)} flat$3$simp$38 = flat$3$simp$26;
    write acc$conv$2$simp$14 = flat$2;
    write acc$conv$2$simp$15 = flat$3$simp$36;
    write acc$conv$2$simp$16 = flat$3$simp$37;
    write acc$conv$2$simp$17 = flat$3$simp$38;
  }
  save_resumable@{Array DateTime} acc$conv$2$simp$14;
  save_resumable@{Array (Buf 2 Bool)} acc$conv$2$simp$15;
  save_resumable@{Array (Buf 2 Error)} acc$conv$2$simp$16;
  save_resumable@{Array (Buf 2 Int)} acc$conv$2$simp$17;
  read@{Array DateTime} conv$2$simp$40 = acc$conv$2$simp$14;
  read@{Array (Buf 2 Bool)} conv$2$simp$41 = acc$conv$2$simp$15;
  read@{Array (Buf 2 Error)} conv$2$simp$42 = acc$conv$2$simp$16;
  read@{Array (Buf 2 Int)} conv$2$simp$43 = acc$conv$2$simp$17;
  init flat$16$simp$45@{Bool} = True@{Bool};
  init flat$16$simp$46@{Error} = ExceptTombstone@{Error};
  init flat$16$simp$47@{Array DateTime} = []@{Array DateTime};
  init flat$16$simp$48@{Array Int} = []@{Array Int};
  foreach (flat$17 in 0@{Int}..Array_length#@{DateTime}
                         conv$2$simp$40) {
    read@{Bool} flat$16$simp$49 = flat$16$simp$45;
    read@{Error} flat$16$simp$50 = flat$16$simp$46;
    read@{Array DateTime} flat$16$simp$51 = flat$16$simp$47;
    read@{Array Int} flat$16$simp$52 = flat$16$simp$48;
    let simp$290 = unsafe_Array_index#@{DateTime}
                   conv$2$simp$40 flat$17;
    let simp$292 = unsafe_Array_index#@{Buf 2 Bool}
                   conv$2$simp$41 flat$17;
    let simp$294 = unsafe_Array_index#@{Buf 2 Error}
                   conv$2$simp$42 flat$17;
    let simp$296 = unsafe_Array_index#@{Buf 2 Int}
                   conv$2$simp$43 flat$17;
    init flat$19$simp$53@{Bool} = False@{Bool};
    init flat$19$simp$54@{Error} = ExceptTombstone@{Error};
    init flat$19$simp$55@{Array DateTime} = []@{Array DateTime};
    init flat$19$simp$56@{Array Int} = []@{Array Int};
    if (flat$16$simp$49) {
      let simp$330 = Buf_read#@{Array Bool}
                     simp$292;
      let simp$332 = Buf_read#@{Array Error}
                     simp$294;
      let simp$334 = Buf_read#@{Array Int}
                     simp$296;
      init flat$23$simp$60@{Bool} = True@{Bool};
      init flat$23$simp$61@{Error} = ExceptTombstone@{Error};
      init flat$23$simp$62@{Int} = 0@{Int};
      foreach (flat$36 in 0@{Int}..Array_length#@{Bool}
                             simp$330) {
        read@{Bool} flat$23$simp$66 = flat$23$simp$60;
        read@{Error} flat$23$simp$67 = flat$23$simp$61;
        read@{Int} flat$23$simp$68 = flat$23$simp$62;
        let simp$348 = unsafe_Array_index#@{Bool}
                       simp$330 flat$36;
        let simp$352 = unsafe_Array_index#@{Int}
                       simp$334 flat$36;
        init flat$38$simp$69@{Bool} = False@{Bool};
        init flat$38$simp$70@{Error} = ExceptTombstone@{Error};
        init flat$38$simp$71@{Int} = 0@{Int};
        if (simp$348) {
          init flat$41$simp$72@{Bool} = False@{Bool};
          init flat$41$simp$73@{Error} = ExceptTombstone@{Error};
          init flat$41$simp$74@{Int} = 0@{Int};
          if (flat$23$simp$66) {
            write flat$41$simp$72 = True@{Bool};
            write flat$41$simp$73 = ExceptTombstone@{Error};
            write flat$41$simp$74 = add#@{Int}
                                    simp$352 flat$23$simp$68;
          } else {
            write flat$41$simp$72 = False@{Bool};
            write flat$41$simp$73 = flat$23$simp$67;
            write flat$41$simp$74 = 0@{Int};
          }
          read@{Bool} flat$41$simp$75 = flat$41$simp$72;
          read@{Error} flat$41$simp$76 = flat$41$simp$73;
          read@{Int} flat$41$simp$77 = flat$41$simp$74;
          write flat$38$simp$69 = flat$41$simp$75;
          write flat$38$simp$70 = flat$41$simp$76;
          write flat$38$simp$71 = flat$41$simp$77;
        } else {
          write flat$38$simp$69 = False@{Bool};
          write flat$38$simp$70 = unsafe_Array_index#@{Error}
                                  simp$332 flat$36;
          write flat$38$simp$71 = 0@{Int};
        }
        read@{Bool} flat$38$simp$78 = flat$38$simp$69;
        read@{Error} flat$38$simp$79 = flat$38$simp$70;
        read@{Int} flat$38$simp$80 = flat$38$simp$71;
        write flat$23$simp$60 = flat$38$simp$78;
        write flat$23$simp$61 = flat$38$simp$79;
        write flat$23$simp$62 = flat$38$simp$80;
      }
      read@{Bool} flat$23$simp$84 = flat$23$simp$60;
      read@{Error} flat$23$simp$85 = flat$23$simp$61;
      read@{Int} flat$23$simp$86 = flat$23$simp$62;
      init flat$24$simp$87@{Bool} = False@{Bool};
      init flat$24$simp$88@{Error} = ExceptTombstone@{Error};
      init flat$24$simp$89@{Array DateTime} = []@{Array DateTime};
      init flat$24$simp$90@{Array Int} = []@{Array Int};
      if (flat$23$simp$84) {
        init flat$27@{Bool} = False@{Bool};
        init flat$28@{Array DateTime} = flat$16$simp$51;
        init flat$29@{Array Int} = flat$16$simp$52;
        read@{Array DateTime} flat$28 = flat$28;
        let flat$30 = Array_length#@{DateTime}
                      flat$28;
        foreach (flat$31 in 0@{Int}..flat$30) {
          read@{Array DateTime} flat$28 = flat$28;
          read@{Array Int} flat$29 = flat$29;
          let simp$438 = unsafe_Array_index#@{DateTime}
                         flat$28 flat$31;
          if (eq#@{DateTime} simp$438 simp$290) {
            let flat$32 = unsafe_Array_index#@{Int}
                          flat$29 flat$31;
            write flat$29 = Array_put#@{Int}
                            flat$29 flat$31 flat$32;
            write flat$27 = True@{Bool};
          }
        }
        read@{Bool} flat$27 = flat$27;
        if (flat$27) {
          
        } else {
          read@{Array DateTime} flat$33 = flat$28;
          let simp$439 = Array_length#@{DateTime}
                         flat$33;
          write flat$28 = Array_put#@{DateTime}
                          flat$33 simp$439 simp$290;
          read@{Array Int} flat$34 = flat$29;
          let simp$440 = Array_length#@{Int}
                         flat$34;
          write flat$29 = Array_put#@{Int}
                          flat$34 simp$440
                          flat$23$simp$86;
        }
        read@{Array DateTime} flat$28 = flat$28;
        read@{Array Int} flat$29 = flat$29;
        write flat$24$simp$87 = True@{Bool};
        write flat$24$simp$88 = ExceptTombstone@{Error};
        write flat$24$simp$89 = flat$28;
        write flat$24$simp$90 = flat$29;
      } else {
        write flat$24$simp$87 = False@{Bool};
        write flat$24$simp$88 = flat$23$simp$85;
        write flat$24$simp$89 = []@{Array DateTime};
        write flat$24$simp$90 = []@{Array Int};
      }
      read@{Bool} flat$24$simp$91 = flat$24$simp$87;
      read@{Error} flat$24$simp$92 = flat$24$simp$88;
      read@{Array DateTime} flat$24$simp$93 = flat$24$simp$89;
      read@{Array Int} flat$24$simp$94 = flat$24$simp$90;
      write flat$19$simp$53 = flat$24$simp$91;
      write flat$19$simp$54 = flat$24$simp$92;
      write flat$19$simp$55 = flat$24$simp$93;
      write flat$19$simp$56 = flat$24$simp$94;
    } else {
      write flat$19$simp$53 = False@{Bool};
      write flat$19$simp$54 = flat$16$simp$50;
      write flat$19$simp$55 = []@{Array DateTime};
      write flat$19$simp$56 = []@{Array Int};
    }
    read@{Bool} flat$19$simp$95 = flat$19$simp$53;
    read@{Error} flat$19$simp$96 = flat$19$simp$54;
    read@{Array DateTime} flat$19$simp$97 = flat$19$simp$55;
    read@{Array Int} flat$19$simp$98 = flat$19$simp$56;
    write flat$16$simp$45 = flat$19$simp$95;
    write flat$16$simp$46 = flat$19$simp$96;
    write flat$16$simp$47 = flat$19$simp$97;
    write flat$16$simp$48 = flat$19$simp$98;
  }
  read@{Bool} flat$16$simp$99 = flat$16$simp$45;
  read@{Error} flat$16$simp$100 = flat$16$simp$46;
  read@{Array DateTime} flat$16$simp$101 = flat$16$simp$47;
  read@{Array Int} flat$16$simp$102 = flat$16$simp$48;
  output@{(Sum Error (Map DateTime Int))} repl (flat$16$simp$99@{Bool},
               flat$16$simp$100@{Error},
               flat$16$simp$101@{Array DateTime},
               flat$16$simp$102@{Array Int});
}

- Core evaluation:
[homer, [(1989-12-17,100)
        ,(1990-01-01,200)
        ,(1994-01-01,300)
        ,(1999-01-01,400)
        ,(2010-01-01,500)]
,marge, [(1989-12-17,30)]]

> > > 