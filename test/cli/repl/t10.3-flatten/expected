welcome to iREPL
ok, loaded 20 functions from data/libs/prelude.icicle
ok, loaded test/cli/repl/data.psv, 13 rows
> -- Show everything
> ok, core-simp is now on
ok, flatten is now on
> > -- A rather complicated feature to convert to Avalanche
> - Flattened:
gen$time = TIME
{
  init acc$c$conv$13$simp$4@{Error} = ExceptNotAnError@{Error};
  init acc$c$conv$13$simp$5@{Int} = 0@{Int};
  init acc$conv$30$simp$6@{Buf 3 Error} = Buf []@{Buf 3 Error};
  init acc$conv$30$simp$7@{Buf 3 Int} = Buf []@{Buf 3 Int};
  load_resumable@{Error} acc$c$conv$13$simp$4;
  load_resumable@{Int} acc$c$conv$13$simp$5;
  load_resumable@{Buf 3 Error} acc$conv$30$simp$6;
  load_resumable@{Buf 3 Int} acc$conv$30$simp$7;
  for_facts (gen$fact$simp$40@{Error},
             gen$fact$simp$41@{Int},
             gen$fact$simp$42@{Time}) in new {
    read@{Buf 3 Error} acc$conv$30$simp$6 = acc$conv$30$simp$6;
    write acc$conv$30$simp$6 = Buf_push#@{Buf 3 Error}
                               acc$conv$30$simp$6
                               gen$fact$simp$40;
    read@{Buf 3 Int} acc$conv$30$simp$7 = acc$conv$30$simp$7;
    write acc$conv$30$simp$7 = Buf_push#@{Buf 3 Int}
                               acc$conv$30$simp$7
                               gen$fact$simp$41;
    init flat$1$simp$10@{Error} = ExceptNotAnError@{Error};
    init flat$1$simp$11@{Bool} = False@{Bool};
    if (eq#@{Error} gen$fact$simp$40
        (ExceptNotAnError@{Error})) {
      write flat$1$simp$10 = ExceptNotAnError@{Error};
      write flat$1$simp$11 = gt#@{Int}
                             gen$fact$simp$41 (10@{Int});
    } else {
      write flat$1$simp$10 = gen$fact$simp$40;
      write flat$1$simp$11 = False@{Bool};
    }
    read@{Error} flat$1$simp$12 = flat$1$simp$10;
    read@{Bool} flat$1$simp$13 = flat$1$simp$11;
    init flat$2@{Bool} = False@{Bool};
    if (eq#@{Error} flat$1$simp$12
        (ExceptNotAnError@{Error})) {
      write flat$2 = flat$1$simp$13;
    } 
     else {
      write flat$2 = True@{Bool};
    } 
    
    read@{Bool} flat$2 = flat$2;
    if (flat$2) {
      read@{Error} acc$c$conv$13$simp$14 = acc$c$conv$13$simp$4;
      read@{Int} acc$c$conv$13$simp$15 = acc$c$conv$13$simp$5;
      init flat$3$simp$16@{Error} = ExceptNotAnError@{Error};
      init flat$3$simp$17@{Int} = 0@{Int};
      if (eq#@{Error} gen$fact$simp$40
          (ExceptNotAnError@{Error})) {
        init flat$6$simp$18@{Error} = ExceptNotAnError@{Error};
        init flat$6$simp$19@{Int} = 0@{Int};
        if (eq#@{Error} acc$c$conv$13$simp$14
            (ExceptNotAnError@{Error})) {
          write flat$6$simp$18 = ExceptNotAnError@{Error};
          write flat$6$simp$19 = add#@{Int}
                                 acc$c$conv$13$simp$15 (1@{Int});
        } else {
          write flat$6$simp$18 = acc$c$conv$13$simp$14;
          write flat$6$simp$19 = 0@{Int};
        }
        read@{Error} flat$6$simp$20 = flat$6$simp$18;
        read@{Int} flat$6$simp$21 = flat$6$simp$19;
        init flat$7$simp$22@{Error} = ExceptNotAnError@{Error};
        init flat$7$simp$23@{Int} = 0@{Int};
        if (eq#@{Error} flat$6$simp$20
            (ExceptNotAnError@{Error})) {
          write flat$7$simp$22 = ExceptNotAnError@{Error};
          write flat$7$simp$23 = flat$6$simp$21;
        } else {
          write flat$7$simp$22 = flat$6$simp$20;
          write flat$7$simp$23 = 0@{Int};
        }
        read@{Error} flat$7$simp$24 = flat$7$simp$22;
        read@{Int} flat$7$simp$25 = flat$7$simp$23;
        write flat$3$simp$16 = flat$7$simp$24;
        write flat$3$simp$17 = flat$7$simp$25;
      } else {
        write flat$3$simp$16 = gen$fact$simp$40;
        write flat$3$simp$17 = 0@{Int};
      }
      read@{Error} flat$3$simp$26 = flat$3$simp$16;
      read@{Int} flat$3$simp$27 = flat$3$simp$17;
      write acc$c$conv$13$simp$4 = flat$3$simp$26;
      write acc$c$conv$13$simp$5 = flat$3$simp$27;
    }
  }
  save_resumable@{Error} acc$c$conv$13$simp$4;
  save_resumable@{Int} acc$c$conv$13$simp$5;
  save_resumable@{Buf 3 Error} acc$conv$30$simp$6;
  save_resumable@{Buf 3 Int} acc$conv$30$simp$7;
  read@{Error} c$conv$13$simp$28 = acc$c$conv$13$simp$4;
  read@{Int} c$conv$13$simp$29 = acc$c$conv$13$simp$5;
  read@{Buf 3 Error} conv$30$simp$30 = acc$conv$30$simp$6;
  read@{Buf 3 Int} conv$30$simp$31 = acc$conv$30$simp$7;
  init flat$16$simp$32@{Error} = ExceptNotAnError@{Error};
  init flat$16$simp$33@{Int} = 0@{Int};
  init flat$16$simp$34@{Array Error} = []@{Array Error};
  init flat$16$simp$35@{Array Int} = []@{Array Int};
  if (eq#@{Error} c$conv$13$simp$28
      (ExceptNotAnError@{Error})) {
    write flat$16$simp$32 = ExceptNotAnError@{Error};
    write flat$16$simp$33 = c$conv$13$simp$29;
    write flat$16$simp$34 = Buf_read#@{Array Error}
                            conv$30$simp$30;
    write flat$16$simp$35 = Buf_read#@{Array Int}
                            conv$30$simp$31;
  } else {
    write flat$16$simp$32 = c$conv$13$simp$28;
    write flat$16$simp$33 = 0@{Int};
    write flat$16$simp$34 = []@{Array Error};
    write flat$16$simp$35 = []@{Array Int};
  }
  read@{Error} flat$16$simp$36 = flat$16$simp$32;
  read@{Int} flat$16$simp$37 = flat$16$simp$33;
  read@{Array Error} flat$16$simp$38 = flat$16$simp$34;
  read@{Array Int} flat$16$simp$39 = flat$16$simp$35;
  output@{(Sum Error (Int, Array (Sum Error Int)))} repl (flat$16$simp$36@{Error},
               flat$16$simp$37@{Int},
               flat$16$simp$38@{Array Error},
               flat$16$simp$39@{Array Int});
}

- Core evaluation:
[homer, (5,[300,400,500])
,marge, (1,[0,10,20])]

> > -- Something involves the abstract buffer type
> - Flattened:
gen$time = TIME
{
  init acc$conv$2$simp$14@{Array Time} = []@{Array Time};
  init acc$conv$2$simp$15@{Array (Buf 2 Error)} = []@{Array (Buf 2 Error)};
  init acc$conv$2$simp$16@{Array (Buf 2 Int)} = []@{Array (Buf 2 Int)};
  load_resumable@{Array Time} acc$conv$2$simp$14;
  load_resumable@{Array (Buf 2 Error)} acc$conv$2$simp$15;
  load_resumable@{Array (Buf 2 Int)} acc$conv$2$simp$16;
  for_facts (gen$fact$simp$79@{Error},
             gen$fact$simp$80@{Int},
             gen$fact$simp$81@{Time}) in new {
    read@{Array Time} acc$conv$2$simp$18 = acc$conv$2$simp$14;
    read@{Array (Buf 2 Error)} acc$conv$2$simp$19 = acc$conv$2$simp$15;
    read@{Array (Buf 2 Int)} acc$conv$2$simp$20 = acc$conv$2$simp$16;
    let simp$407 = Buf_make#@{Buf 2 Error} (()@{Unit});
    let simp$219 = Buf_push#@{Buf 2 Error}
                   simp$407 gen$fact$simp$79;
    let simp$409 = Buf_make#@{Buf 2 Int} (()@{Unit});
    let simp$221 = Buf_push#@{Buf 2 Int}
                   simp$409 gen$fact$simp$80;
    init flat$1@{Bool} = False@{Bool};
    init flat$2@{Array Time} = acc$conv$2$simp$18;
    init flat$3$simp$22@{Array (Buf 2 Error)} = acc$conv$2$simp$19;
    init flat$3$simp$23@{Array (Buf 2 Int)} = acc$conv$2$simp$20;
    read@{Array Time} flat$2 = flat$2;
    let flat$4 = Array_length#@{Time}
                 flat$2;
    foreach (flat$5 in 0@{Int}..flat$4) {
      read@{Array Time} flat$2 = flat$2;
      read@{Array (Buf 2 Error)} flat$3$simp$25 = flat$3$simp$22;
      read@{Array (Buf 2 Int)} flat$3$simp$26 = flat$3$simp$23;
      let simp$100 = unsafe_Array_index#@{Time}
                     flat$2 flat$5;
      if (eq#@{Time} simp$100
          gen$fact$simp$81) {
        let simp$235 = unsafe_Array_index#@{Buf 2 Error}
                       flat$3$simp$25 flat$5;
        let simp$237 = unsafe_Array_index#@{Buf 2 Int}
                       flat$3$simp$26 flat$5;
        let simp$251 = Buf_push#@{Buf 2 Error}
                       simp$235 gen$fact$simp$79;
        let simp$254 = Buf_push#@{Buf 2 Int}
                       simp$237 gen$fact$simp$80;
        write flat$3$simp$22 = Array_put#@{Buf 2 Error}
                               flat$3$simp$25 flat$5 simp$251;
        write flat$3$simp$23 = Array_put#@{Buf 2 Int}
                               flat$3$simp$26 flat$5 simp$254;
        write flat$1 = True@{Bool};
      }
    }
    read@{Bool} flat$1 = flat$1;
    if (flat$1) {
      
    } else {
      read@{Array Time} flat$8 = flat$2;
      let simp$117 = Array_length#@{Time}
                     flat$8;
      write flat$2 = Array_put#@{Time} flat$8
                     simp$117 gen$fact$simp$81;
      read@{Array (Buf 2 Error)} flat$9$simp$28 = flat$3$simp$22;
      read@{Array (Buf 2 Int)} flat$9$simp$29 = flat$3$simp$23;
      let simp$122 = Array_length#@{Buf 2 Error}
                     flat$9$simp$28;
      write flat$3$simp$22 = Array_put#@{Buf 2 Error}
                             flat$9$simp$28 simp$122
                             simp$219;
      write flat$3$simp$23 = Array_put#@{Buf 2 Int}
                             flat$9$simp$29 simp$122
                             simp$221;
    }
    read@{Array Time} flat$2 = flat$2;
    read@{Array (Buf 2 Error)} flat$3$simp$31 = flat$3$simp$22;
    read@{Array (Buf 2 Int)} flat$3$simp$32 = flat$3$simp$23;
    write acc$conv$2$simp$14 = flat$2;
    write acc$conv$2$simp$15 = flat$3$simp$31;
    write acc$conv$2$simp$16 = flat$3$simp$32;
  }
  save_resumable@{Array Time} acc$conv$2$simp$14;
  save_resumable@{Array (Buf 2 Error)} acc$conv$2$simp$15;
  save_resumable@{Array (Buf 2 Int)} acc$conv$2$simp$16;
  read@{Array Time} conv$2$simp$34 = acc$conv$2$simp$14;
  read@{Array (Buf 2 Error)} conv$2$simp$35 = acc$conv$2$simp$15;
  read@{Array (Buf 2 Int)} conv$2$simp$36 = acc$conv$2$simp$16;
  init flat$16$simp$38@{Error} = ExceptNotAnError@{Error};
  init flat$16$simp$39@{Array Time} = []@{Array Time};
  init flat$16$simp$40@{Array Int} = []@{Array Int};
  foreach (flat$17 in 0@{Int}..Array_length#@{Time}
                         conv$2$simp$34) {
    read@{Error} flat$16$simp$41 = flat$16$simp$38;
    read@{Array Time} flat$16$simp$42 = flat$16$simp$39;
    read@{Array Int} flat$16$simp$43 = flat$16$simp$40;
    let simp$307 = unsafe_Array_index#@{Time}
                   conv$2$simp$34 flat$17;
    let simp$309 = unsafe_Array_index#@{Buf 2 Error}
                   conv$2$simp$35 flat$17;
    let simp$311 = unsafe_Array_index#@{Buf 2 Int}
                   conv$2$simp$36 flat$17;
    init flat$19$simp$44@{Error} = ExceptNotAnError@{Error};
    init flat$19$simp$45@{Array Time} = []@{Array Time};
    init flat$19$simp$46@{Array Int} = []@{Array Int};
    if (eq#@{Error} flat$16$simp$41
        (ExceptNotAnError@{Error})) {
      let simp$337 = Buf_read#@{Array Error}
                     simp$309;
      let simp$339 = Buf_read#@{Array Int}
                     simp$311;
      init flat$23$simp$49@{Error} = ExceptNotAnError@{Error};
      init flat$23$simp$50@{Int} = 0@{Int};
      foreach (flat$36 in 0@{Int}..Array_length#@{Error}
                             simp$337) {
        read@{Error} flat$23$simp$53 = flat$23$simp$49;
        read@{Int} flat$23$simp$54 = flat$23$simp$50;
        let simp$351 = unsafe_Array_index#@{Error}
                       simp$337 flat$36;
        let simp$353 = unsafe_Array_index#@{Int}
                       simp$339 flat$36;
        init flat$38$simp$55@{Error} = ExceptNotAnError@{Error};
        init flat$38$simp$56@{Int} = 0@{Int};
        if (eq#@{Error} simp$351
            (ExceptNotAnError@{Error})) {
          init flat$41$simp$57@{Error} = ExceptNotAnError@{Error};
          init flat$41$simp$58@{Int} = 0@{Int};
          if (eq#@{Error} flat$23$simp$53
              (ExceptNotAnError@{Error})) {
            write flat$41$simp$57 = ExceptNotAnError@{Error};
            write flat$41$simp$58 = add#@{Int}
                                    simp$353 flat$23$simp$54;
          } else {
            write flat$41$simp$57 = flat$23$simp$53;
            write flat$41$simp$58 = 0@{Int};
          }
          read@{Error} flat$41$simp$59 = flat$41$simp$57;
          read@{Int} flat$41$simp$60 = flat$41$simp$58;
          write flat$38$simp$55 = flat$41$simp$59;
          write flat$38$simp$56 = flat$41$simp$60;
        } else {
          write flat$38$simp$55 = simp$351;
          write flat$38$simp$56 = 0@{Int};
        }
        read@{Error} flat$38$simp$61 = flat$38$simp$55;
        read@{Int} flat$38$simp$62 = flat$38$simp$56;
        write flat$23$simp$49 = flat$38$simp$61;
        write flat$23$simp$50 = flat$38$simp$62;
      }
      read@{Error} flat$23$simp$65 = flat$23$simp$49;
      read@{Int} flat$23$simp$66 = flat$23$simp$50;
      init flat$24$simp$67@{Error} = ExceptNotAnError@{Error};
      init flat$24$simp$68@{Array Time} = []@{Array Time};
      init flat$24$simp$69@{Array Int} = []@{Array Int};
      if (eq#@{Error} flat$23$simp$65
          (ExceptNotAnError@{Error})) {
        init flat$27@{Bool} = False@{Bool};
        init flat$28@{Array Time} = flat$16$simp$42;
        init flat$29@{Array Int} = flat$16$simp$43;
        read@{Array Time} flat$28 = flat$28;
        let flat$30 = Array_length#@{Time}
                      flat$28;
        foreach (flat$31 in 0@{Int}..flat$30) {
          read@{Array Time} flat$28 = flat$28;
          read@{Array Int} flat$29 = flat$29;
          let simp$177 = unsafe_Array_index#@{Time}
                         flat$28 flat$31;
          if (eq#@{Time} simp$177 simp$307) {
            let flat$32 = unsafe_Array_index#@{Int}
                          flat$29 flat$31;
            write flat$29 = Array_put#@{Int}
                            flat$29 flat$31 flat$32;
            write flat$27 = True@{Bool};
          }
        }
        read@{Bool} flat$27 = flat$27;
        if (flat$27) {
          
        } else {
          read@{Array Time} flat$33 = flat$28;
          let simp$178 = Array_length#@{Time}
                         flat$33;
          write flat$28 = Array_put#@{Time}
                          flat$33 simp$178 simp$307;
          read@{Array Int} flat$34 = flat$29;
          let simp$179 = Array_length#@{Int}
                         flat$34;
          write flat$29 = Array_put#@{Int}
                          flat$34 simp$179
                          flat$23$simp$66;
        }
        read@{Array Time} flat$28 = flat$28;
        read@{Array Int} flat$29 = flat$29;
        write flat$24$simp$67 = ExceptNotAnError@{Error};
        write flat$24$simp$68 = flat$28;
        write flat$24$simp$69 = flat$29;
      } else {
        write flat$24$simp$67 = flat$23$simp$65;
        write flat$24$simp$68 = []@{Array Time};
        write flat$24$simp$69 = []@{Array Int};
      }
      read@{Error} flat$24$simp$70 = flat$24$simp$67;
      read@{Array Time} flat$24$simp$71 = flat$24$simp$68;
      read@{Array Int} flat$24$simp$72 = flat$24$simp$69;
      write flat$19$simp$44 = flat$24$simp$70;
      write flat$19$simp$45 = flat$24$simp$71;
      write flat$19$simp$46 = flat$24$simp$72;
    } else {
      write flat$19$simp$44 = flat$16$simp$41;
      write flat$19$simp$45 = []@{Array Time};
      write flat$19$simp$46 = []@{Array Int};
    }
    read@{Error} flat$19$simp$73 = flat$19$simp$44;
    read@{Array Time} flat$19$simp$74 = flat$19$simp$45;
    read@{Array Int} flat$19$simp$75 = flat$19$simp$46;
    write flat$16$simp$38 = flat$19$simp$73;
    write flat$16$simp$39 = flat$19$simp$74;
    write flat$16$simp$40 = flat$19$simp$75;
  }
  read@{Error} flat$16$simp$76 = flat$16$simp$38;
  read@{Array Time} flat$16$simp$77 = flat$16$simp$39;
  read@{Array Int} flat$16$simp$78 = flat$16$simp$40;
  output@{(Sum Error (Map Time Int))} repl (flat$16$simp$76@{Error},
               flat$16$simp$77@{Array Time},
               flat$16$simp$78@{Array Int});
}

- Core evaluation:
[homer, [(1989-12-17,100)
        ,(1990-01-01,200)
        ,(1994-01-01,300)
        ,(1999-01-01,400)
        ,(2010-01-01,500)]
,marge, [(1989-12-17,30)]]

> > > 