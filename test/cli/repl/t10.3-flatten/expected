welcome to iREPL
ok, loaded 35 functions from data/libs/prelude.icicle
ok, loaded test/cli/repl/data.psv, 13 rows
> -- Show everything
> ok, core-simp is now on
ok, flatten is now on
> > -- A rather complicated feature to convert to Avalanche
> - Flattened:
conv$3 = TIME
init acc$conv$10$simp$8@{Error} = ExceptNotAnError@{Error};
init acc$c$conv$11$simp$13@{Error} = ExceptNotAnError@{Error};
init acc$c$conv$11$simp$14@{Int} = 0@{Int};
init acc$conv$26$simp$15@{Buf 3 FactIdentifier} = Buf_make#@{Buf 3 FactIdentifier} (()@{Unit});
init acc$conv$26$simp$16@{Buf 3 Error} = Buf_make#@{Buf 3 Error} (()@{Unit});
init acc$conv$26$simp$17@{Buf 3 Int} = Buf_make#@{Buf 3 Int} (()@{Unit});
load_resumable@{Buf 3 FactIdentifier} acc$conv$26$simp$15;
load_resumable@{Buf 3 Error} acc$conv$26$simp$16;
load_resumable@{Buf 3 Int} acc$conv$26$simp$17;
load_resumable@{Error} acc$c$conv$11$simp$13;
load_resumable@{Int} acc$c$conv$11$simp$14;
load_resumable@{Error} acc$conv$10$simp$8;
for_facts (conv$2@{Time}, conv$1@{FactIdentifier}, conv$0$simp$60@{Error}, conv$0$simp$61@{Int}, conv$0$simp$62@{Time}) in new
{
  init flat$0$simp$18@{Error} = ExceptNotAnError@{Error};
  init flat$0$simp$19@{Bool} = False@{Bool};
  if (eq#@{Error} conv$0$simp$60 (ExceptNotAnError@{Error}))
  {
    write flat$0$simp$18 = ExceptNotAnError@{Error};
    write flat$0$simp$19 = gt#@{Int} conv$0$simp$61 (10@{Int});
  }
  else
  {
    write flat$0$simp$18 = conv$0$simp$60;
    write flat$0$simp$19 = False@{Bool};
  }
  read flat$0$simp$20 = flat$0$simp$18 [Error];
  read flat$0$simp$21 = flat$0$simp$19 [Bool];
  init flat$1@{Bool} = False@{Bool};
  if (eq#@{Error} flat$0$simp$20 (ExceptNotAnError@{Error}))
  {
    write flat$1 = flat$0$simp$21;
  }
  else
  {
    write flat$1 = True@{Bool};
  }
  read flat$1 = flat$1 [Bool];
  if (flat$1)
  {
    write acc$conv$10$simp$8 = conv$0$simp$60;
    read conv$10$aval$1$simp$22 = acc$conv$10$simp$8 [Error];
    read c$conv$11$aval$0$simp$27 = acc$c$conv$11$simp$13 [Error];
    read c$conv$11$aval$0$simp$28 = acc$c$conv$11$simp$14 [Int];
    init flat$2$simp$29@{Error} = ExceptNotAnError@{Error};
    init flat$2$simp$30@{Int} = 0@{Int};
    if (eq#@{Error} conv$10$aval$1$simp$22 (ExceptNotAnError@{Error}))
    {
      init flat$5$simp$31@{Error} = ExceptNotAnError@{Error};
      init flat$5$simp$32@{Int} = 0@{Int};
      if (eq#@{Error} c$conv$11$aval$0$simp$27 (ExceptNotAnError@{Error}))
      {
        write flat$5$simp$31 = ExceptNotAnError@{Error};
        write flat$5$simp$32 = add#@{Int} c$conv$11$aval$0$simp$28 (1@{Int});
      }
      else
      {
        write flat$5$simp$31 = c$conv$11$aval$0$simp$27;
        write flat$5$simp$32 = 0@{Int};
      }
      read flat$5$simp$33 = flat$5$simp$31 [Error];
      read flat$5$simp$34 = flat$5$simp$32 [Int];
      init flat$6$simp$35@{Error} = ExceptNotAnError@{Error};
      init flat$6$simp$36@{Int} = 0@{Int};
      if (eq#@{Error} flat$5$simp$33 (ExceptNotAnError@{Error}))
      {
        write flat$6$simp$35 = ExceptNotAnError@{Error};
        write flat$6$simp$36 = flat$5$simp$34;
      }
      else
      {
        write flat$6$simp$35 = flat$5$simp$33;
        write flat$6$simp$36 = 0@{Int};
      }
      read flat$6$simp$37 = flat$6$simp$35 [Error];
      read flat$6$simp$38 = flat$6$simp$36 [Int];
      write flat$2$simp$29 = flat$6$simp$37;
      write flat$2$simp$30 = flat$6$simp$38;
    }
    else
    {
      write flat$2$simp$29 = conv$10$aval$1$simp$22;
      write flat$2$simp$30 = 0@{Int};
    }
    read flat$2$simp$39 = flat$2$simp$29 [Error];
    read flat$2$simp$40 = flat$2$simp$30 [Int];
    write acc$c$conv$11$simp$13 = flat$2$simp$39;
    write acc$c$conv$11$simp$14 = flat$2$simp$40;
  }
  read acc$conv$26$simp$15 = acc$conv$26$simp$15 [Buf 3 FactIdentifier];
  
  write acc$conv$26$simp$15 = Buf_push#@{Buf 3 FactIdentifier} acc$conv$26$simp$15 conv$1;
  read acc$conv$26$simp$16 = acc$conv$26$simp$16 [Buf 3 Error];
  
  
  write acc$conv$26$simp$16 = Buf_push#@{Buf 3 Error} acc$conv$26$simp$16 conv$0$simp$60;
  read acc$conv$26$simp$17 = acc$conv$26$simp$17 [Buf 3 Int];
  
  
  write acc$conv$26$simp$17 = Buf_push#@{Buf 3 Int} acc$conv$26$simp$17 conv$0$simp$61;
  
  
  
  
}
read acc$conv$26$flat$16$simp$44 = acc$conv$26$simp$15 [Buf 3 FactIdentifier];
let flat$17 = Buf_read#@{Array FactIdentifier} acc$conv$26$flat$16$simp$44;
foreach (flat$18 in 0@{Int} .. Array_length#@{FactIdentifier} flat$17)
{
  keep_fact_in_history unsafe_Array_index#@{FactIdentifier} flat$17 flat$18;
}

save_resumable@{Buf 3 FactIdentifier} acc$conv$26$simp$15;
save_resumable@{Buf 3 Error} acc$conv$26$simp$16;
save_resumable@{Buf 3 Int} acc$conv$26$simp$17;
save_resumable@{Error} acc$c$conv$11$simp$13;
save_resumable@{Int} acc$c$conv$11$simp$14;
save_resumable@{Error} acc$conv$10$simp$8;
read conv$26$simp$48 = acc$conv$26$simp$16 [Buf 3 Error];
read conv$26$simp$49 = acc$conv$26$simp$17 [Buf 3 Int];
read c$conv$11$simp$50 = acc$c$conv$11$simp$13 [Error];
read c$conv$11$simp$51 = acc$c$conv$11$simp$14 [Int];
init flat$23$simp$52@{Error} = ExceptNotAnError@{Error};
init flat$23$simp$53@{Int} = 0@{Int};
init flat$23$simp$54@{Array Error} = unsafe_Array_create#@{Error} (0@{Int});
init flat$23$simp$55@{Array Int} = unsafe_Array_create#@{Int} (0@{Int});
if (eq#@{Error} c$conv$11$simp$50 (ExceptNotAnError@{Error}))
{
  write flat$23$simp$52 = ExceptNotAnError@{Error};
  write flat$23$simp$53 = c$conv$11$simp$51;
  write flat$23$simp$54 = Buf_read#@{Array Error} conv$26$simp$48;
  write flat$23$simp$55 = Buf_read#@{Array Int} conv$26$simp$49;
}
else
{
  write flat$23$simp$52 = c$conv$11$simp$50;
  write flat$23$simp$53 = 0@{Int};
  write flat$23$simp$54 = unsafe_Array_create#@{Error} (0@{Int});
  write flat$23$simp$55 = unsafe_Array_create#@{Int} (0@{Int});
}
read flat$23$simp$56 = flat$23$simp$52 [Error];
read flat$23$simp$57 = flat$23$simp$53 [Int];
read flat$23$simp$58 = flat$23$simp$54 [Array Error];
read flat$23$simp$59 = flat$23$simp$55 [Array Int];
output@{(Sum Error (Int, Array (Sum Error Int)))} repl (flat$23$simp$56@{Error}, flat$23$simp$57@{Int}, flat$23$simp$58@{Array Error}, flat$23$simp$59@{Array Int});

- Core evaluation:
[homer, (5,[300,400,500])
,marge, (1,[0,10,20])]

> > -- Something involves the abstract buffer type
> - Flattened:
conv$3 = TIME
init acc$conv$4$simp$20@{Array Time} = unsafe_Array_create#@{Time} (0@{Int});
init acc$conv$4$simp$21@{Array (Buf 2 FactIdentifier)} = unsafe_Array_create#@{Buf 2 FactIdentifier} (0@{Int});
init acc$conv$4$simp$22@{Array (Buf 2 Error)} = unsafe_Array_create#@{Buf 2 Error} (0@{Int});
init acc$conv$4$simp$23@{Array (Buf 2 Int)} = unsafe_Array_create#@{Buf 2 Int} (0@{Int});
load_resumable@{Array Time} acc$conv$4$simp$20;
load_resumable@{Array (Buf 2 FactIdentifier)} acc$conv$4$simp$21;
load_resumable@{Array (Buf 2 Error)} acc$conv$4$simp$22;
load_resumable@{Array (Buf 2 Int)} acc$conv$4$simp$23;
for_facts (conv$2@{Time}, conv$1@{FactIdentifier}, conv$0$simp$97@{Error}, conv$0$simp$98@{Int}, conv$0$simp$99@{Time}) in new
{
  read conv$4$aval$0$simp$25 = acc$conv$4$simp$20 [Array Time];
  read conv$4$aval$0$simp$26 = acc$conv$4$simp$21 [Array (Buf 2 FactIdentifier)];
  read conv$4$aval$0$simp$27 = acc$conv$4$simp$22 [Array (Buf 2 Error)];
  read conv$4$aval$0$simp$28 = acc$conv$4$simp$23 [Array (Buf 2 Int)];
  let simp$323 = Buf_make#@{Buf 2 FactIdentifier} (()@{Unit});
  let simp$193 = Buf_push#@{Buf 2 FactIdentifier} simp$323 conv$1;
  let simp$324 = Buf_make#@{Buf 2 Error} (()@{Unit});
  let simp$196 = Buf_push#@{Buf 2 Error} simp$324 conv$0$simp$97;
  let simp$325 = Buf_make#@{Buf 2 Int} (()@{Unit});
  let simp$199 = Buf_push#@{Buf 2 Int} simp$325 conv$0$simp$98;
  init flat$1@{Bool} = False@{Bool};
  init flat$2@{Array Time} = conv$4$aval$0$simp$25;
  init flat$3$simp$30@{Array (Buf 2 FactIdentifier)} = conv$4$aval$0$simp$26;
  init flat$3$simp$31@{Array (Buf 2 Error)} = conv$4$aval$0$simp$27;
  init flat$3$simp$32@{Array (Buf 2 Int)} = conv$4$aval$0$simp$28;
  read flat$2 = flat$2 [Array Time];
  let flat$4 = Array_length#@{Time} flat$2;
  foreach (flat$5 in 0@{Int} .. flat$4)
  {
    read flat$2 = flat$2 [Array Time];
    read flat$3$simp$34 = flat$3$simp$30 [Array (Buf 2 FactIdentifier)];
    read flat$3$simp$35 = flat$3$simp$31 [Array (Buf 2 Error)];
    read flat$3$simp$36 = flat$3$simp$32 [Array (Buf 2 Int)];
    let simp$115 = unsafe_Array_index#@{Time} flat$2 flat$5;
    if (eq#@{Time} simp$115 conv$0$simp$99)
    {
      let simp$206 = unsafe_Array_index#@{Buf 2 FactIdentifier} flat$3$simp$34 flat$5;
      let simp$208 = unsafe_Array_index#@{Buf 2 Error} flat$3$simp$35 flat$5;
      let simp$210 = unsafe_Array_index#@{Buf 2 Int} flat$3$simp$36 flat$5;
      let simp$217 = Buf_push#@{Buf 2 FactIdentifier} simp$206 conv$1;
      let simp$220 = Buf_push#@{Buf 2 Error} simp$208 conv$0$simp$97;
      let simp$223 = Buf_push#@{Buf 2 Int} simp$210 conv$0$simp$98;
      write flat$3$simp$30 = Array_put_mutable#@{Buf 2 FactIdentifier} flat$3$simp$34 flat$5 simp$217;
      write flat$3$simp$31 = Array_put_mutable#@{Buf 2 Error} flat$3$simp$35 flat$5 simp$220;
      write flat$3$simp$32 = Array_put_mutable#@{Buf 2 Int} flat$3$simp$36 flat$5 simp$223;
      write flat$1 = True@{Bool};
    }
  }
  read flat$1 = flat$1 [Bool];
  if (flat$1)
  {
    
  }
  else
  {
    read flat$8 = flat$2 [Array Time];
    let simp$130 = Array_length#@{Time} flat$8;
    write flat$2 = Array_put_mutable#@{Time} flat$8 simp$130 conv$0$simp$99;
    read flat$9$simp$38 = flat$3$simp$30 [Array (Buf 2 FactIdentifier)];
    read flat$9$simp$39 = flat$3$simp$31 [Array (Buf 2 Error)];
    read flat$9$simp$40 = flat$3$simp$32 [Array (Buf 2 Int)];
    let simp$134 = Array_length#@{Buf 2 FactIdentifier} flat$9$simp$38;
    write flat$3$simp$30 = Array_put_mutable#@{Buf 2 FactIdentifier} flat$9$simp$38 simp$134 simp$193;
    write flat$3$simp$31 = Array_put_mutable#@{Buf 2 Error} flat$9$simp$39 simp$134 simp$196;
    write flat$3$simp$32 = Array_put_mutable#@{Buf 2 Int} flat$9$simp$40 simp$134 simp$199;
  }
  read flat$2 = flat$2 [Array Time];
  read flat$3$simp$42 = flat$3$simp$30 [Array (Buf 2 FactIdentifier)];
  read flat$3$simp$43 = flat$3$simp$31 [Array (Buf 2 Error)];
  read flat$3$simp$44 = flat$3$simp$32 [Array (Buf 2 Int)];
  write acc$conv$4$simp$20 = flat$2;
  write acc$conv$4$simp$21 = flat$3$simp$42;
  write acc$conv$4$simp$22 = flat$3$simp$43;
  write acc$conv$4$simp$23 = flat$3$simp$44;
}
read acc$conv$4$flat$11$simp$47 = acc$conv$4$simp$21 [Array (Buf 2 FactIdentifier)];
foreach (flat$13 in 0@{Int} .. Array_length#@{Buf 2 FactIdentifier} acc$conv$4$flat$11$simp$47)
{
  let simp$257 = unsafe_Array_index#@{Buf 2 FactIdentifier} acc$conv$4$flat$11$simp$47 flat$13;
  let flat$14 = Buf_read#@{Array FactIdentifier} simp$257;
  foreach (flat$15 in 0@{Int} .. Array_length#@{FactIdentifier} flat$14)
  {
    keep_fact_in_history unsafe_Array_index#@{FactIdentifier} flat$14 flat$15;
  }
}
save_resumable@{Array Time} acc$conv$4$simp$20;
save_resumable@{Array (Buf 2 FactIdentifier)} acc$conv$4$simp$21;
save_resumable@{Array (Buf 2 Error)} acc$conv$4$simp$22;
save_resumable@{Array (Buf 2 Int)} acc$conv$4$simp$23;
read conv$4$simp$51 = acc$conv$4$simp$20 [Array Time];
read conv$4$simp$53 = acc$conv$4$simp$22 [Array (Buf 2 Error)];
read conv$4$simp$54 = acc$conv$4$simp$23 [Array (Buf 2 Int)];
init flat$23$simp$56@{Error} = ExceptNotAnError@{Error};
init flat$23$simp$57@{Array Time} = unsafe_Array_create#@{Time} (0@{Int});
init flat$23$simp$58@{Array Int} = unsafe_Array_create#@{Int} (0@{Int});
foreach (flat$24 in 0@{Int} .. Array_length#@{Time} conv$4$simp$51)
{
  read flat$23$simp$59 = flat$23$simp$56 [Error];
  read flat$23$simp$60 = flat$23$simp$57 [Array Time];
  read flat$23$simp$61 = flat$23$simp$58 [Array Int];
  let simp$272 = unsafe_Array_index#@{Time} conv$4$simp$51 flat$24;
  let simp$276 = unsafe_Array_index#@{Buf 2 Error} conv$4$simp$53 flat$24;
  let simp$278 = unsafe_Array_index#@{Buf 2 Int} conv$4$simp$54 flat$24;
  init flat$26$simp$62@{Error} = ExceptNotAnError@{Error};
  init flat$26$simp$63@{Array Time} = unsafe_Array_create#@{Time} (0@{Int});
  init flat$26$simp$64@{Array Int} = unsafe_Array_create#@{Int} (0@{Int});
  if (eq#@{Error} flat$23$simp$59 (ExceptNotAnError@{Error}))
  {
    let simp$294 = Buf_read#@{Array Error} simp$276;
    let simp$296 = Buf_read#@{Array Int} simp$278;
    init flat$30$simp$67@{Error} = ExceptNotAnError@{Error};
    init flat$30$simp$68@{Int} = 0@{Int};
    foreach (flat$43 in 0@{Int} .. Array_length#@{Error} simp$294)
    {
      read flat$30$simp$71 = flat$30$simp$67 [Error];
      read flat$30$simp$72 = flat$30$simp$68 [Int];
      let simp$301 = unsafe_Array_index#@{Error} simp$294 flat$43;
      let simp$303 = unsafe_Array_index#@{Int} simp$296 flat$43;
      init flat$45$simp$73@{Error} = ExceptNotAnError@{Error};
      init flat$45$simp$74@{Int} = 0@{Int};
      if (eq#@{Error} simp$301 (ExceptNotAnError@{Error}))
      {
        init flat$48$simp$75@{Error} = ExceptNotAnError@{Error};
        init flat$48$simp$76@{Int} = 0@{Int};
        if (eq#@{Error} flat$30$simp$71 (ExceptNotAnError@{Error}))
        {
          write flat$48$simp$75 = ExceptNotAnError@{Error};
          write flat$48$simp$76 = add#@{Int} simp$303 flat$30$simp$72;
        }
        else
        {
          write flat$48$simp$75 = flat$30$simp$71;
          write flat$48$simp$76 = 0@{Int};
        }
        read flat$48$simp$77 = flat$48$simp$75 [Error];
        read flat$48$simp$78 = flat$48$simp$76 [Int];
        write flat$45$simp$73 = flat$48$simp$77;
        write flat$45$simp$74 = flat$48$simp$78;
      }
      else
      {
        write flat$45$simp$73 = simp$301;
        write flat$45$simp$74 = 0@{Int};
      }
      read flat$45$simp$79 = flat$45$simp$73 [Error];
      read flat$45$simp$80 = flat$45$simp$74 [Int];
      write flat$30$simp$67 = flat$45$simp$79;
      write flat$30$simp$68 = flat$45$simp$80;
    }
    read flat$30$simp$83 = flat$30$simp$67 [Error];
    read flat$30$simp$84 = flat$30$simp$68 [Int];
    init flat$31$simp$85@{Error} = ExceptNotAnError@{Error};
    init flat$31$simp$86@{Array Time} = unsafe_Array_create#@{Time} (0@{Int});
    init flat$31$simp$87@{Array Int} = unsafe_Array_create#@{Int} (0@{Int});
    if (eq#@{Error} flat$30$simp$83 (ExceptNotAnError@{Error}))
    {
      init flat$34@{Bool} = False@{Bool};
      init flat$35@{Array Time} = flat$23$simp$60;
      init flat$36@{Array Int} = flat$23$simp$61;
      read flat$35 = flat$35 [Array Time];
      let flat$37 = Array_length#@{Time} flat$35;
      foreach (flat$38 in 0@{Int} .. flat$37)
      {
        read flat$35 = flat$35 [Array Time];
        read flat$36 = flat$36 [Array Int];
        let simp$174 = unsafe_Array_index#@{Time} flat$35 flat$38;
        if (eq#@{Time} simp$174 simp$272)
        {
          let flat$39 = unsafe_Array_index#@{Int} flat$36 flat$38;
          write flat$36 = Array_put_mutable#@{Int} flat$36 flat$38 flat$39;
          write flat$34 = True@{Bool};
        }
      }
      read flat$34 = flat$34 [Bool];
      if (flat$34)
      {
        
      }
      else
      {
        read flat$40 = flat$35 [Array Time];
        let simp$175 = Array_length#@{Time} flat$40;
        write flat$35 = Array_put_mutable#@{Time} flat$40 simp$175 simp$272;
        read flat$41 = flat$36 [Array Int];
        let simp$176 = Array_length#@{Int} flat$41;
        write flat$36 = Array_put_mutable#@{Int} flat$41 simp$176 flat$30$simp$84;
      }
      read flat$35 = flat$35 [Array Time];
      read flat$36 = flat$36 [Array Int];
      write flat$31$simp$85 = ExceptNotAnError@{Error};
      write flat$31$simp$86 = flat$35;
      write flat$31$simp$87 = flat$36;
    }
    else
    {
      write flat$31$simp$85 = flat$30$simp$83;
      write flat$31$simp$86 = unsafe_Array_create#@{Time} (0@{Int});
      write flat$31$simp$87 = unsafe_Array_create#@{Int} (0@{Int});
    }
    read flat$31$simp$88 = flat$31$simp$85 [Error];
    read flat$31$simp$89 = flat$31$simp$86 [Array Time];
    read flat$31$simp$90 = flat$31$simp$87 [Array Int];
    write flat$26$simp$62 = flat$31$simp$88;
    write flat$26$simp$63 = flat$31$simp$89;
    write flat$26$simp$64 = flat$31$simp$90;
  }
  else
  {
    write flat$26$simp$62 = flat$23$simp$59;
    write flat$26$simp$63 = unsafe_Array_create#@{Time} (0@{Int});
    write flat$26$simp$64 = unsafe_Array_create#@{Int} (0@{Int});
  }
  read flat$26$simp$91 = flat$26$simp$62 [Error];
  read flat$26$simp$92 = flat$26$simp$63 [Array Time];
  read flat$26$simp$93 = flat$26$simp$64 [Array Int];
  write flat$23$simp$56 = flat$26$simp$91;
  write flat$23$simp$57 = flat$26$simp$92;
  write flat$23$simp$58 = flat$26$simp$93;
}
read flat$23$simp$94 = flat$23$simp$56 [Error];
read flat$23$simp$95 = flat$23$simp$57 [Array Time];
read flat$23$simp$96 = flat$23$simp$58 [Array Int];
output@{(Sum Error (Map Time Int))} repl (flat$23$simp$94@{Error}, flat$23$simp$95@{Array Time}, flat$23$simp$96@{Array Int});

- Core evaluation:
[homer, [(1989-12-17,100)
        ,(1990-01-01,200)
        ,(1994-01-01,300)
        ,(1999-01-01,400)
        ,(2010-01-01,500)]
,marge, [(1989-12-17,30)]]

> > > 