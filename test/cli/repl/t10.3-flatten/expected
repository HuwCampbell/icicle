welcome to iREPL
ok, loaded 24 functions from data/libs/prelude.icicle
ok, loaded test/cli/repl/data.psv, 13 rows
> -- Show everything
> ok, core-simp is now on
ok, flatten is now on
> > -- A rather complicated feature to convert to Avalanche
> - Flattened:
conv$3 = TIME
init acc$conv$10$simp$4@{Error} = ExceptNotAnError@{Error};
init acc$c$conv$11$simp$9@{Error} = ExceptNotAnError@{Error};
init acc$c$conv$11$simp$10@{Int} = 0@{Int};
init acc$conv$26$simp$11@{Buf 3 Error} = Buf []@{Buf 3 Error};
init acc$conv$26$simp$12@{Buf 3 Int} = Buf []@{Buf 3 Int};
load_resumable@{Buf 3 Error} acc$conv$26$simp$11;
load_resumable@{Buf 3 Int} acc$conv$26$simp$12;
load_resumable@{Error} acc$c$conv$11$simp$9;
load_resumable@{Int} acc$c$conv$11$simp$10;
load_resumable@{Error} acc$conv$10$simp$4;
for_facts (conv$2@{Time}, conv$1@{FactIdentifier}, conv$0$simp$50@{Error}, conv$0$simp$51@{Int}, conv$0$simp$52@{Time}) in new
{
  init flat$0$simp$24@{Error} = ExceptNotAnError@{Error};
  init flat$0$simp$25@{Bool} = False@{Bool};
  if (eq#@{Error} conv$0$simp$63 (ExceptNotAnError@{Error}))
  {
    write flat$0$simp$24 = ExceptNotAnError@{Error};
    write flat$0$simp$25 = gt#@{Int} conv$0$simp$64 (10@{Int});
  }
  else
  {
    write flat$0$simp$24 = conv$0$simp$63;
    write flat$0$simp$25 = False@{Bool};
  }
  read flat$0$simp$26 = flat$0$simp$24 [Error];
  read flat$0$simp$27 = flat$0$simp$25 [Bool];
  init flat$1@{Bool} = False@{Bool};
  if (eq#@{Error} flat$0$simp$26 (ExceptNotAnError@{Error}))
  {
    write flat$1 = flat$0$simp$27;
  }
  else
  {
    write flat$1 = True@{Bool};
  }
  read flat$1 = flat$1 [Bool];
  if (flat$1)
  {
    write acc$conv$10$simp$4 = conv$0$simp$50;
    read aval$1$simp$17 = acc$conv$10$simp$4 [Error];
    read aval$0$simp$22 = acc$c$conv$11$simp$9 [Error];
    read aval$0$simp$23 = acc$c$conv$11$simp$10 [Int];
    init flat$2$simp$24@{Error} = ExceptNotAnError@{Error};
    init flat$2$simp$25@{Int} = 0@{Int};
    if (eq#@{Error} aval$1$simp$17 (ExceptNotAnError@{Error}))
    {
      init flat$5$simp$26@{Error} = ExceptNotAnError@{Error};
      init flat$5$simp$27@{Int} = 0@{Int};
      if (eq#@{Error} aval$0$simp$22 (ExceptNotAnError@{Error}))
      {
        write flat$5$simp$26 = ExceptNotAnError@{Error};
        write flat$5$simp$27 = add#@{Int} aval$0$simp$23 (1@{Int});
      }
      else
      {
        write flat$5$simp$26 = aval$0$simp$22;
        write flat$5$simp$27 = 0@{Int};
      }
      read flat$5$simp$39 = flat$5$simp$37 [Error];
      read flat$5$simp$40 = flat$5$simp$38 [Int];
      init flat$6$simp$41@{Error} = ExceptNotAnError@{Error};
      init flat$6$simp$42@{Int} = 0@{Int};
      if (eq#@{Error} flat$5$simp$39 (ExceptNotAnError@{Error}))
      {
        write flat$6$simp$41 = ExceptNotAnError@{Error};
        write flat$6$simp$42 = flat$5$simp$40;
      }
      else
      {
        write flat$6$simp$41 = flat$5$simp$39;
        write flat$6$simp$42 = 0@{Int};
      }
      read flat$6$simp$43 = flat$6$simp$41 [Error];
      read flat$6$simp$44 = flat$6$simp$42 [Int];
      write flat$2$simp$35 = flat$6$simp$43;
      write flat$2$simp$36 = flat$6$simp$44;
    }
    else
    {
      write flat$2$simp$24 = aval$1$simp$17;
      write flat$2$simp$25 = 0@{Int};
    }
    read flat$2$simp$34 = flat$2$simp$24 [Error];
    read flat$2$simp$35 = flat$2$simp$25 [Int];
    write acc$c$conv$11$simp$9 = flat$2$simp$34;
    write acc$c$conv$11$simp$10 = flat$2$simp$35;
  }
  read acc$conv$26$simp$11 = acc$conv$26$simp$11 [Buf 3 Error];
  write acc$conv$26$simp$11 = Buf_push#@{Buf 3 Error} acc$conv$26$simp$11 conv$0$simp$50;
  read acc$conv$26$simp$12 = acc$conv$26$simp$12 [Buf 3 Int];
  write acc$conv$26$simp$12 = Buf_push#@{Buf 3 Int} acc$conv$26$simp$12 conv$0$simp$51;
}
save_resumable@{Buf 3 Error} acc$conv$26$simp$11;
save_resumable@{Buf 3 Int} acc$conv$26$simp$12;
save_resumable@{Error} acc$c$conv$11$simp$9;
save_resumable@{Int} acc$c$conv$11$simp$10;
save_resumable@{Error} acc$conv$10$simp$4;
read conv$26$simp$38 = acc$conv$26$simp$11 [Buf 3 Error];
read conv$26$simp$39 = acc$conv$26$simp$12 [Buf 3 Int];
read c$conv$11$simp$40 = acc$c$conv$11$simp$9 [Error];
read c$conv$11$simp$41 = acc$c$conv$11$simp$10 [Int];
init flat$16$simp$42@{Error} = ExceptNotAnError@{Error};
init flat$16$simp$43@{Int} = 0@{Int};
init flat$16$simp$44@{Array Error} = []@{Array Error};
init flat$16$simp$45@{Array Int} = []@{Array Int};
if (eq#@{Error} c$conv$11$simp$40 (ExceptNotAnError@{Error}))
{
  write flat$16$simp$55 = ExceptNotAnError@{Error};
  write flat$16$simp$56 = c$conv$11$simp$54;
  write flat$16$simp$57 = Buf_read#@{Array Error} conv$26$simp$51;
  write flat$16$simp$58 = Buf_read#@{Array Int} conv$26$simp$52;
}
else
{
  write flat$16$simp$55 = c$conv$11$simp$53;
  write flat$16$simp$56 = 0@{Int};
  write flat$16$simp$57 = unsafe_Array_create#@{Error} (0@{Int});
  write flat$16$simp$58 = unsafe_Array_create#@{Int} (0@{Int});
}
read flat$16$simp$59 = flat$16$simp$55 [Error];
read flat$16$simp$60 = flat$16$simp$56 [Int];
read flat$16$simp$61 = flat$16$simp$57 [Array Error];
read flat$16$simp$62 = flat$16$simp$58 [Array Int];
output@{(Sum Error (Int, Array (Sum Error Int)))} repl (flat$16$simp$59@{Error}, flat$16$simp$60@{Int}, flat$16$simp$61@{Array Error}, flat$16$simp$62@{Array Int});

- Core evaluation:
[homer, (5,[300,400,500])
,marge, (1,[0,10,20])]

> > -- Something involves the abstract buffer type
> - Flattened:
conv$3 = TIME
init acc$conv$4$simp$32@{Array Time} = []@{Array Time};
init acc$conv$4$simp$33@{Array (Buf 2 FactIdentifier)} = []@{Array (Buf 2 FactIdentifier)};
init acc$conv$4$simp$34@{Array (Buf 2 Error)} = []@{Array (Buf 2 Error)};
init acc$conv$4$simp$35@{Array (Buf 2 Int)} = []@{Array (Buf 2 Int)};
load_resumable@{Array Time} acc$conv$4$simp$32;
load_resumable@{Array (Buf 2 FactIdentifier)} acc$conv$4$simp$33;
load_resumable@{Array (Buf 2 Error)} acc$conv$4$simp$34;
load_resumable@{Array (Buf 2 Int)} acc$conv$4$simp$35;
for_facts (conv$2@{Time}, conv$1@{FactIdentifier}, conv$0$simp$104@{Error}, conv$0$simp$105@{Int}, conv$0$simp$106@{Time}) in new
{
  read aval$0$simp$18 = acc$conv$4$simp$14 [Array Time];
  read aval$0$simp$19 = acc$conv$4$simp$15 [Array (Buf 2 Error)];
  read aval$0$simp$20 = acc$conv$4$simp$16 [Array (Buf 2 Int)];
  let simp$391 = Buf_make#@{Buf 2 Error} (()@{Unit});
  let simp$219 = Buf_push#@{Buf 2 Error} simp$391 conv$0$simp$79;
  let simp$393 = Buf_make#@{Buf 2 Int} (()@{Unit});
  let simp$221 = Buf_push#@{Buf 2 Int} simp$393 conv$0$simp$80;
  init flat$1@{Bool} = False@{Bool};
  init flat$2@{Array Time} = aval$0$simp$18;
  init flat$3$simp$22@{Array (Buf 2 Error)} = aval$0$simp$19;
  init flat$3$simp$23@{Array (Buf 2 Int)} = aval$0$simp$20;
  read flat$2 = flat$2 [Array Time];
  let flat$4 = Array_length#@{Time} flat$2;
  foreach (flat$5 in 0@{Int} .. flat$4)
  {
    read flat$2 = flat$2 [Array Time];
    read flat$3$simp$46 = flat$3$simp$42 [Array (Buf 2 FactIdentifier)];
    read flat$3$simp$47 = flat$3$simp$43 [Array (Buf 2 Error)];
    read flat$3$simp$48 = flat$3$simp$44 [Array (Buf 2 Int)];
    let simp$133 = unsafe_Array_index#@{Time} flat$2 flat$5;
    if (eq#@{Time} simp$133 conv$0$simp$106)
    {
      let simp$294 = unsafe_Array_index#@{Buf 2 FactIdentifier} flat$3$simp$46 flat$5;
      let simp$296 = unsafe_Array_index#@{Buf 2 Error} flat$3$simp$47 flat$5;
      let simp$298 = unsafe_Array_index#@{Buf 2 Int} flat$3$simp$48 flat$5;
      let simp$319 = Buf_push#@{Buf 2 FactIdentifier} simp$294 conv$1;
      let simp$322 = Buf_push#@{Buf 2 Error} simp$296 conv$0$simp$104;
      let simp$325 = Buf_push#@{Buf 2 Int} simp$298 conv$0$simp$105;
      write flat$3$simp$42 = Array_put#@{Buf 2 FactIdentifier} flat$3$simp$46 flat$5 simp$319;
      write flat$3$simp$43 = Array_put#@{Buf 2 Error} flat$3$simp$47 flat$5 simp$322;
      write flat$3$simp$44 = Array_put#@{Buf 2 Int} flat$3$simp$48 flat$5 simp$325;
      write flat$1 = True@{Bool};
    }
  }
  read flat$1 = flat$1 [Bool];
  if (flat$1)
  {
    
  }
  else
  {
    read flat$8 = flat$2 [Array Time];
    let simp$158 = Array_length#@{Time} flat$8;
    write flat$2 = Array_put#@{Time} flat$8 simp$158 conv$0$simp$106;
    read flat$9$simp$50 = flat$3$simp$42 [Array (Buf 2 FactIdentifier)];
    read flat$9$simp$51 = flat$3$simp$43 [Array (Buf 2 Error)];
    read flat$9$simp$52 = flat$3$simp$44 [Array (Buf 2 Int)];
    let simp$163 = Array_length#@{Buf 2 FactIdentifier} flat$9$simp$50;
    write flat$3$simp$42 = Array_put#@{Buf 2 FactIdentifier} flat$9$simp$50 simp$163 simp$271;
    write flat$3$simp$43 = Array_put#@{Buf 2 Error} flat$9$simp$51 simp$163 simp$274;
    write flat$3$simp$44 = Array_put#@{Buf 2 Int} flat$9$simp$52 simp$163 simp$277;
  }
  read flat$2 = flat$2 [Array Time];
  read flat$3$simp$54 = flat$3$simp$42 [Array (Buf 2 FactIdentifier)];
  read flat$3$simp$55 = flat$3$simp$43 [Array (Buf 2 Error)];
  read flat$3$simp$56 = flat$3$simp$44 [Array (Buf 2 Int)];
  write acc$conv$4$simp$32 = flat$2;
  write acc$conv$4$simp$33 = flat$3$simp$54;
  write acc$conv$4$simp$34 = flat$3$simp$55;
  write acc$conv$4$simp$35 = flat$3$simp$56;
}
save_resumable@{Array Time} acc$conv$4$simp$32;
save_resumable@{Array (Buf 2 FactIdentifier)} acc$conv$4$simp$33;
save_resumable@{Array (Buf 2 Error)} acc$conv$4$simp$34;
save_resumable@{Array (Buf 2 Int)} acc$conv$4$simp$35;
read conv$4$simp$58 = acc$conv$4$simp$32 [Array Time];
read conv$4$simp$60 = acc$conv$4$simp$34 [Array (Buf 2 Error)];
read conv$4$simp$61 = acc$conv$4$simp$35 [Array (Buf 2 Int)];
init flat$16$simp$63@{Error} = ExceptNotAnError@{Error};
init flat$16$simp$64@{Array Time} = []@{Array Time};
init flat$16$simp$65@{Array Int} = []@{Array Int};
foreach (flat$17 in 0@{Int} .. Array_length#@{Time} conv$4$simp$58)
{
  read flat$16$simp$66 = flat$16$simp$63 [Error];
  read flat$16$simp$67 = flat$16$simp$64 [Array Time];
  read flat$16$simp$68 = flat$16$simp$65 [Array Int];
  let simp$392 = unsafe_Array_index#@{Time} conv$4$simp$58 flat$17;
  let simp$396 = unsafe_Array_index#@{Buf 2 Error} conv$4$simp$60 flat$17;
  let simp$398 = unsafe_Array_index#@{Buf 2 Int} conv$4$simp$61 flat$17;
  init flat$19$simp$69@{Error} = ExceptNotAnError@{Error};
  init flat$19$simp$70@{Array Time} = []@{Array Time};
  init flat$19$simp$71@{Array Int} = []@{Array Int};
  if (eq#@{Error} flat$16$simp$66 (ExceptNotAnError@{Error}))
  {
    let simp$432 = Buf_read#@{Array Error} simp$396;
    let simp$434 = Buf_read#@{Array Int} simp$398;
    init flat$23$simp$74@{Error} = ExceptNotAnError@{Error};
    init flat$23$simp$75@{Int} = 0@{Int};
    foreach (flat$36 in 0@{Int} .. Array_length#@{Error} simp$432)
    {
      read flat$23$simp$78 = flat$23$simp$74 [Error];
      read flat$23$simp$79 = flat$23$simp$75 [Int];
      let simp$446 = unsafe_Array_index#@{Error} simp$432 flat$36;
      let simp$448 = unsafe_Array_index#@{Int} simp$434 flat$36;
      init flat$38$simp$80@{Error} = ExceptNotAnError@{Error};
      init flat$38$simp$81@{Int} = 0@{Int};
      if (eq#@{Error} simp$446 (ExceptNotAnError@{Error}))
      {
        init flat$41$simp$82@{Error} = ExceptNotAnError@{Error};
        init flat$41$simp$83@{Int} = 0@{Int};
        if (eq#@{Error} flat$23$simp$78 (ExceptNotAnError@{Error}))
        {
          write flat$41$simp$82 = ExceptNotAnError@{Error};
          write flat$41$simp$83 = add#@{Int} simp$448 flat$23$simp$79;
        }
        else
        {
          write flat$41$simp$82 = flat$23$simp$78;
          write flat$41$simp$83 = 0@{Int};
        }
        read flat$41$simp$84 = flat$41$simp$82 [Error];
        read flat$41$simp$85 = flat$41$simp$83 [Int];
        write flat$38$simp$80 = flat$41$simp$84;
        write flat$38$simp$81 = flat$41$simp$85;
      }
      else
      {
        write flat$38$simp$80 = simp$446;
        write flat$38$simp$81 = 0@{Int};
      }
      read flat$38$simp$86 = flat$38$simp$80 [Error];
      read flat$38$simp$87 = flat$38$simp$81 [Int];
      write flat$23$simp$74 = flat$38$simp$86;
      write flat$23$simp$75 = flat$38$simp$87;
    }
    read flat$23$simp$90 = flat$23$simp$74 [Error];
    read flat$23$simp$91 = flat$23$simp$75 [Int];
    init flat$24$simp$92@{Error} = ExceptNotAnError@{Error};
    init flat$24$simp$93@{Array Time} = []@{Array Time};
    init flat$24$simp$94@{Array Int} = []@{Array Int};
    if (eq#@{Error} flat$23$simp$90 (ExceptNotAnError@{Error}))
    {
      init flat$27@{Bool} = False@{Bool};
      init flat$28@{Array Time} = flat$16$simp$67;
      init flat$29@{Array Int} = flat$16$simp$68;
      read flat$28 = flat$28 [Array Time];
      let flat$30 = Array_length#@{Time} flat$28;
      foreach (flat$31 in 0@{Int} .. flat$30)
      {
        read flat$28 = flat$28 [Array Time];
        read flat$29 = flat$29 [Array Int];
        let simp$226 = unsafe_Array_index#@{Time} flat$28 flat$31;
        if (eq#@{Time} simp$226 simp$392)
        {
          let flat$32 = unsafe_Array_index#@{Int} flat$29 flat$31;
          write flat$29 = Array_put#@{Int} flat$29 flat$31 flat$32;
          write flat$27 = True@{Bool};
        }
      }
      read flat$27 = flat$27 [Bool];
      if (flat$27)
      {
        
      }
      else
      {
        read flat$33 = flat$28 [Array Time];
        let simp$227 = Array_length#@{Time} flat$33;
        write flat$28 = Array_put#@{Time} flat$33 simp$227 simp$392;
        read flat$34 = flat$29 [Array Int];
        let simp$228 = Array_length#@{Int} flat$34;
        write flat$29 = Array_put#@{Int} flat$34 simp$228 flat$23$simp$91;
      }
      read flat$28 = flat$28 [Array Time];
      read flat$29 = flat$29 [Array Int];
      write flat$24$simp$92 = ExceptNotAnError@{Error};
      write flat$24$simp$93 = flat$28;
      write flat$24$simp$94 = flat$29;
    }
    else
    {
      write flat$24$simp$92 = flat$23$simp$90;
      write flat$24$simp$93 = unsafe_Array_create#@{Time} (0@{Int});
      write flat$24$simp$94 = unsafe_Array_create#@{Int} (0@{Int});
    }
    read flat$24$simp$95 = flat$24$simp$92 [Error];
    read flat$24$simp$96 = flat$24$simp$93 [Array Time];
    read flat$24$simp$97 = flat$24$simp$94 [Array Int];
    write flat$19$simp$69 = flat$24$simp$95;
    write flat$19$simp$70 = flat$24$simp$96;
    write flat$19$simp$71 = flat$24$simp$97;
  }
  else
  {
    write flat$19$simp$69 = flat$16$simp$66;
    write flat$19$simp$70 = unsafe_Array_create#@{Time} (0@{Int});
    write flat$19$simp$71 = unsafe_Array_create#@{Int} (0@{Int});
  }
  read flat$19$simp$98 = flat$19$simp$69 [Error];
  read flat$19$simp$99 = flat$19$simp$70 [Array Time];
  read flat$19$simp$100 = flat$19$simp$71 [Array Int];
  write flat$16$simp$63 = flat$19$simp$98;
  write flat$16$simp$64 = flat$19$simp$99;
  write flat$16$simp$65 = flat$19$simp$100;
}
read flat$16$simp$101 = flat$16$simp$63 [Error];
read flat$16$simp$102 = flat$16$simp$64 [Array Time];
read flat$16$simp$103 = flat$16$simp$65 [Array Int];
output@{(Sum Error (Map Time Int))} repl (flat$16$simp$101@{Error}, flat$16$simp$102@{Array Time}, flat$16$simp$103@{Array Int});

- Core evaluation:
[homer, [(1989-12-17,100)
        ,(1990-01-01,200)
        ,(1994-01-01,300)
        ,(1999-01-01,400)
        ,(2010-01-01,500)]
,marge, [(1989-12-17,30)]]

> > > 
