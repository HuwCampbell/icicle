welcome to iREPL
ok, loaded 20 functions from data/libs/prelude.icicle
ok, loaded test/cli/repl/data.psv, 13 rows
> -- Show everything
> ok, core is now on
ok, core-type is now on
ok, core-simp is now on
> > -- A rather complicated feature to convert to Avalanche
> - Core:
Program (source : Stream (Sum Error Int))
Precomputations:

Stream transformers:
conv$0 =
    source
conv$2 =
    sfilter [((Sum Error Int), DateTime)]
    (
    \conv$3 : ((Sum Error Int), DateTime). 
    
    let simp$2 = fst# [(Sum Error Int)] [DateTime]
                 conv$3
     in 
    let simp$3 = Sum_fold# [Error] [Int] [(Sum Error Bool)]
                 (
                 \reify$0$conv$4 : Error. 
                 left# [Error] [Bool]
                 reify$0$conv$4) (
                 \reify$1$conv$5 : Int. 
                 right# [Error] [Bool] (gt# [Int]
                                        reify$1$conv$5 (10 : Int)))
                 simp$2
     in Sum_fold# [Error] [Bool] [Bool]
        (
        \reify$2$conv$7 : Error. 
        True : Bool) (
        \reify$3$conv$8 : Bool. 
        reify$3$conv$8) simp$3) conv$0
Reductions:
c$conv$11 =
    rfold  
    [((Sum Error Int), DateTime)]
    [Int] (
    \c$conv$11 : Int.  
    \conv$10 : ((Sum Error Int), DateTime). 
    add# [Int] c$conv$11 (1 : Int))
    (0 : Int) conv$2
conv$22 =
    rfold  
    [((Sum Error Int), DateTime)]
    [(Sum Error (Buf Int))] (
    \conv$17 : (Sum Error (Buf Int)). 
    
    \conv$16 : ((Sum Error Int), DateTime). 
    Sum_fold# [Error] [Buf Int] [(Sum Error (Buf Int))]
    (
    \conv$21 : Error. 
    left# [Error] [Buf Int] conv$21)
    (
    \conv$19 : Buf Int. 
    Sum_fold# [Error] [Int] [(Sum Error (Buf Int))]
    (
    \conv$21 : Error. 
    left# [Error] [Buf Int] conv$21)
    (
    \conv$20 : Int. 
    right# [Error] [Buf Int]
    (Latest_push# [Int] conv$19
     conv$20))
    (fst# [(Sum Error Int)] [DateTime]
     conv$16)) conv$17)
    (Right Buf 3 [] : (Sum Error (Buf Int)))
    conv$0
Postcomputations with date as now$conv$1:
conv$12 =
    right# [Error] [Int]
    c$conv$11
conv$32 =
    Sum_fold# [Error] [Int] [(Sum Error (Int, Array Int))]
    (
    \reify$4$conv$13 : Error.  
    let conv$14 = left# [Error] [(Int, Array Int)]
                  reify$4$conv$13
     in conv$14) (
    \reify$5$conv$15 : Int.  
    let conv$23 = Sum_fold# [Error] [Buf Int] [(Sum Error (Array Int))]
                  (
                  \conv$21 : Error. 
                  left# [Error] [Array Int]
                  conv$21) (
                  \conv$20 : Buf Int. 
                  right# [Error] [Array Int]
                  (Latest_read# [Int] conv$20))
                  conv$22
     in 
    let conv$30 = Sum_fold# [Error] [Array Int] [(Sum Error (Int, Array Int))]
                  (
                  \reify$6$conv$24 : Error.  
                  let conv$25 = left# [Error] [(Int, Array Int)]
                                reify$6$conv$24
                   in conv$25) (
                  \reify$7$conv$26 : Array Int.  
                  let conv$27 = pair# [Int] [Array Int]
                                reify$5$conv$15 reify$7$conv$26
                   in 
                  let conv$28 = right# [Error] [(Int, Array Int)]
                                conv$27
                   in conv$28) conv$23
     in conv$30) conv$12
Returning:
repl =
    conv$32


- Core type:
[(repl
 ,(Sum Error (Int, Array Int)))]

- Core evaluation:
[homer, (5,[300,400,500])
,marge, (1,[0,10,20])]

> > -- Something involves the abstract buffer type
> - Core:
Program (source : Stream (Sum Error Int))
Precomputations:

Stream transformers:
conv$0 =
    source
Reductions:
conv$2 =
    rfold  
    [((Sum Error Int), DateTime)]
    [Map DateTime (Buf ((Sum Error Int), DateTime))]
    (
    \conv$4 : Map DateTime (Buf ((Sum Error Int), DateTime)). 
    
    \conv$5 : ((Sum Error Int), DateTime). 
    
    let simp$2 = Latest_push# [((Sum Error Int), DateTime)]
                 (Buf 2 [] : Buf ((Sum Error Int), DateTime))
                 conv$5
     in 
    let simp$3 = snd# [(Sum Error Int)] [DateTime]
                 conv$5
     in Map_insertOrUpdate# [DateTime] [Buf ((Sum Error Int), DateTime)]
        (
        \conv$7 : Buf ((Sum Error Int), DateTime). 
        Latest_push# [((Sum Error Int), DateTime)]
        conv$7 conv$5) simp$2 simp$3
        conv$4)
    (Map [] : Map DateTime (Buf ((Sum Error Int), DateTime)))
    conv$0
Postcomputations with date as now$conv$1:
conv$3 =
    Map_fold# [DateTime] [Buf ((Sum Error Int), DateTime)] [(Sum Error (Map DateTime Int))]
    (
    \conv$4 : (Sum Error (Map DateTime Int)). 
    
    \conv$26 : DateTime.  
    \conv$5 : Buf ((Sum Error Int), DateTime). 
    Sum_fold# [Error] [Map DateTime Int] [(Sum Error (Map DateTime Int))]
    (
    \conv$31 : Error. 
    left# [Error] [Map DateTime Int]
    conv$31) (
    \conv$30 : Map DateTime Int. 
    Sum_fold# [Error] [Int] [(Sum Error (Map DateTime Int))]
    (
    \conv$31 : Error. 
    left# [Error] [Map DateTime Int]
    conv$31) (
    \conv$28 : Int. 
    right# [Error] [Map DateTime Int]
    (Map_insertOrUpdate# [DateTime] [Int]
     (
     \conv$29 : Int.  conv$29)
     conv$28 conv$26 conv$30)) (
    let conv$11 = 
                  let conv$6 = Latest_read# [((Sum Error Int), DateTime)]
                               conv$5
                   in Array_fold# [((Sum Error Int), DateTime)] [((Sum Error Int), ((Sum Error Int), Unit))]
                      (
                      \conv$10 : ((Sum Error Int), ((Sum Error Int), Unit)). 
                      
                      \conv$9 : ((Sum Error Int), DateTime). 
                      
                      let v$inline$0$conv$13 = fst# [(Sum Error Int)] [DateTime]
                                               conv$9
                       in pair# [(Sum Error Int)] [((Sum Error Int), Unit)]
                          v$inline$0$conv$13 (
                          let conv$24 = snd# [(Sum Error Int)] [((Sum Error Int), Unit)]
                                        conv$10
                           in 
                          let s$conv$22 = 
                                          let s$conv$14 = fst# [(Sum Error Int)] [Unit]
                                                          conv$24
                                           in Sum_fold# [Error] [Int] [(Sum Error Int)]
                                              (
                                              \reify$0$conv$15 : Error. 
                                              left# [Error] [Int]
                                              reify$0$conv$15) (
                                              \reify$1$conv$16 : Int. 
                                              Sum_fold# [Error] [Int] [(Sum Error Int)]
                                              (
                                              \reify$2$conv$17 : Error. 
                                              left# [Error] [Int]
                                              reify$2$conv$17) (
                                              \reify$3$conv$18 : Int. 
                                              right# [Error] [Int] (add# [Int]
                                                                    reify$1$conv$16
                                                                    reify$3$conv$18))
                                              s$conv$14) v$inline$0$conv$13
                           in pair# [(Sum Error Int)] [Unit]
                              s$conv$22 (() : Unit)))
                      ((Left ExceptTombstone, (Right 0, ())) : ((Sum Error Int), ((Sum Error Int), Unit)))
                      conv$6
     in 
    let conv$24 = snd# [(Sum Error Int)] [((Sum Error Int), Unit)]
                  conv$11
     in 
    let s$conv$22 = 
                    let conv$21 = fst# [(Sum Error Int)] [Unit]
                                  conv$24
                     in conv$21
     in s$conv$22)) conv$4)
    (Right Map [] : (Sum Error (Map DateTime Int)))
    conv$2
Returning:
repl =
    conv$3


- Core type:
[(repl
 ,(Sum Error (Map DateTime Int)))]

- Core evaluation:
[homer, [(1989-12-17,100)
        ,(1990-01-01,200)
        ,(1994-01-01,300)
        ,(1999-01-01,400)
        ,(2010-01-01,500)]
,marge, [(1989-12-17,30)]]

> > > 