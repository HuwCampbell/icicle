# feature salary ~> oldest salary, newest salary

gen$date = DATE
{
  init [Mutable] [Option Int] acc$conv$6 = None : Option Int;
  init [Mutable] [Option Int] acc$conv$12 = None : Option Int;

  load_resumable [Option Int] acc$conv$6;
  load_resumable [Option Int] acc$conv$12;

  for_facts (elem$gen$fact : Int, elem$gen$date : Date) in new {
    read [Mutable] [Option Int] acc$conv$6 = acc$conv$6;
    let anf$9 = some# [Int] elem$gen$fact;
    if (Option_isSome# [Int] acc$conv$6) {
      let flat$0 = unsafe_Option_get# [Int] acc$conv$6;
      write acc$conv$6 = some# [Int] flat$0;
    } else {
      write acc$conv$6 = anf$9;
    }

    read [Mutable] [Option Int] acc$conv$12 = acc$conv$12;
    if (Option_isSome# [Int] acc$conv$12) {
      write acc$conv$12 = some# [Int] elem$gen$fact;
    } else {
      write acc$conv$12 = anf$9;
    }
  }

  save_resumable [Option Int] acc$conv$6;
  save_resumable [Option Int] acc$conv$12;

  read [Mutable] [Option Int] conv$6 = acc$conv$6;
  read [Mutable] [Option Int] conv$12 = acc$conv$12;

  if (Option_isSome# [Int] conv$6) {
    let flat$2 = unsafe_Option_get# [Int] conv$6;
    if (Option_isSome# [Int] conv$12) {
      let flat$3 = unsafe_Option_get# [Int] conv$12;
      let conv$13 = pair# [Int] [Int] flat$2 flat$3;
      output repl conv$13;
    } else {
      let conv$13 = pair# [Int] [Int] flat$2 (error# "Fold1, but there is no value" : Int);
      output repl conv$13;
    }
  } else {
    if (Option_isSome# [Int] conv$12) {
      let flat$4 = unsafe_Option_get# [Int] conv$12;
      let conv$13 = pair# [Int] [Int] (error# "Fold1, but there is no value" : Int) flat$4;
      output repl conv$13;
    } else {
      let conv$13 = pair# [Int] [Int] (error# "Fold1, but there is no value" : Int)
                                      (error# "Fold1, but there is no value" : Int);
      output repl conv$13;
    }
  }
}
