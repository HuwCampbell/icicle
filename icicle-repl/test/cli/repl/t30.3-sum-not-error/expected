welcome to iREPL
ok, loaded 38 functions from data/libs/prelude.icicle
ok, loaded test/cli/repl/data.psv, 13 rows
> -- Enable C evaluation
> ok, c evaluation now on
                   _________-----_____
        _____------           __      ----_
 ___----             ___------              \
    ----________        ----                 \
                -----__    |             _____)
                     __-                /     \
         _______-----    ___--          \    /)\
   ------_______      ---____            \__/  /
                -----__    \ --    _          /\
                       --__--__     \_____/   \_/\
                               ----|   /          |
                                   |  |___________|
                                   |  | ((_(_)| )_)
                                   |  \_((_(_)|/(_)
                                   \             (
                                    \_____________)
> ok, c is now on
> > - C:
#line 1 "state and input definition #0 - repl:input"

typedef struct {
    itime_t          convzs3;
    iint_t           new_count;
    ierror_t         *new_convzs0zssimpflatzs19;
    iint_t           *new_convzs0zssimpflatzs20;
    itime_t          *new_convzs0zssimpflatzs21;
} input_replZCinput_t;

typedef struct {
    /* runtime */
    anemone_mempool_t *mempool;
    iint_t           max_map_size;

    /* inputs */
    input_replZCinput_t input;

  /* compute for (0,0) */
    /* outputs */
    ibool_t          replZCoutputzsixzs0;
    iint_t           replZCoutputzsixzs1;
    idouble_t        replZCoutputzsixzs2;

    /* resumables: values */
    idouble_t        res_0_0_acczsperhapszsconvzs5zssimpflatzs6;
    iint_t           res_0_0_acczsperhapszsconvzs5zssimpflatzs5;
    ibool_t          res_0_0_acczsperhapszsconvzs5zssimpflatzs4;

    /* resumables: has flags */
    ibool_t          has_flags_start_0_0;
    ibool_t          has_0_0_acczsperhapszsconvzs5zssimpflatzs6;
    ibool_t          has_0_0_acczsperhapszsconvzs5zssimpflatzs5;
    ibool_t          has_0_0_acczsperhapszsconvzs5zssimpflatzs4;
    ibool_t          has_flags_end_0_0;


} iattribute_0_t;

iint_t size_of_state_iattribute_0 ()
{
    return sizeof (iattribute_0_t);
}

#line 1 "compute function #0 - repl:input icompute_attribute_0_compute_0"
void icompute_attribute_0_compute_0(iattribute_0_t *s)
{
    idouble_t        perhapszsconvzs5zsavalzs0zssimpflatzs9;
    iint_t           perhapszsconvzs5zsavalzs0zssimpflatzs8;
    ibool_t          perhapszsconvzs5zsavalzs0zssimpflatzs7;
    iint_t           perhapszsconvzs5zssimpflatzs17;
    idouble_t        perhapszsconvzs5zssimpflatzs18;
    ibool_t          perhapszsconvzs5zssimpflatzs16;
    idouble_t        acczsperhapszsconvzs5zssimpflatzs6;
    iint_t           acczsperhapszsconvzs5zssimpflatzs5;
    ibool_t          acczsperhapszsconvzs5zssimpflatzs4;
    idouble_t        flatzs0zssimpflatzs15;
    idouble_t        flatzs0zssimpflatzs12;
    iint_t           flatzs0zssimpflatzs14;
    iint_t           flatzs0zssimpflatzs11;
    ibool_t          flatzs0zssimpflatzs13;
    ibool_t          flatzs0zssimpflatzs10;

    anemone_mempool_t *mempool                = s->mempool;
    itime_t          convzs3                  = s->input.convzs3;
    iint_t           convzs4                  = s->max_map_size;

    acczsperhapszsconvzs5zssimpflatzs4        = ifalse;                               /* init */
    acczsperhapszsconvzs5zssimpflatzs5        = 0;                                    /* init */
    acczsperhapszsconvzs5zssimpflatzs6        = 0.0;                                  /* init */
    
    if (s->has_0_0_acczsperhapszsconvzs5zssimpflatzs4) {
        acczsperhapszsconvzs5zssimpflatzs4    = s->res_0_0_acczsperhapszsconvzs5zssimpflatzs4; /* load */
    }
    
    if (s->has_0_0_acczsperhapszsconvzs5zssimpflatzs5) {
        acczsperhapszsconvzs5zssimpflatzs5    = s->res_0_0_acczsperhapszsconvzs5zssimpflatzs5; /* load */
    }
    
    if (s->has_0_0_acczsperhapszsconvzs5zssimpflatzs6) {
        acczsperhapszsconvzs5zssimpflatzs6    = s->res_0_0_acczsperhapszsconvzs5zssimpflatzs6; /* load */
    }
    
    const iint_t     new_count                = s->input.new_count;
    const ierror_t  *const new_convzs0zssimpflatzs19 = s->input.new_convzs0zssimpflatzs19;
    const iint_t    *const new_convzs0zssimpflatzs20 = s->input.new_convzs0zssimpflatzs20;
    const itime_t   *const new_convzs0zssimpflatzs21 = s->input.new_convzs0zssimpflatzs21;
    
    for (iint_t i = 0; i < new_count; i++) {
        ifactid_t        convzs1              = i;
        itime_t          convzs2              = new_convzs0zssimpflatzs21[i];
        ierror_t         convzs0zssimpflatzs19 = new_convzs0zssimpflatzs19[i];
        iint_t           convzs0zssimpflatzs20 = new_convzs0zssimpflatzs20[i];
        itime_t          convzs0zssimpflatzs21 = new_convzs0zssimpflatzs21[i];
        perhapszsconvzs5zsavalzs0zssimpflatzs7 = acczsperhapszsconvzs5zssimpflatzs4;  /* read */
        perhapszsconvzs5zsavalzs0zssimpflatzs8 = acczsperhapszsconvzs5zssimpflatzs5;  /* read */
        perhapszsconvzs5zsavalzs0zssimpflatzs9 = acczsperhapszsconvzs5zssimpflatzs6;  /* read */
        flatzs0zssimpflatzs10                 = ifalse;                               /* init */
        flatzs0zssimpflatzs11                 = 0;                                    /* init */
        flatzs0zssimpflatzs12                 = 0.0;                                  /* init */
        
        if (perhapszsconvzs5zsavalzs0zssimpflatzs7) {
            flatzs0zssimpflatzs10             = ifalse;                               /* write */
            iint_t           simpflatzs28     = idouble_trunc (perhapszsconvzs5zsavalzs0zssimpflatzs9); /* let */
            flatzs0zssimpflatzs11             = iint_add (simpflatzs28, 1);           /* write */
            flatzs0zssimpflatzs12             = 0.0;                                  /* write */
        } else {
            flatzs0zssimpflatzs10             = itrue;                                /* write */
            flatzs0zssimpflatzs11             = 0;                                    /* write */
            idouble_t        simpflatzs41     = iint_extend (perhapszsconvzs5zsavalzs0zssimpflatzs8); /* let */
            flatzs0zssimpflatzs12             = idouble_add (simpflatzs41, 1.0);      /* write */
        }
        
        flatzs0zssimpflatzs13                 = flatzs0zssimpflatzs10;                /* read */
        flatzs0zssimpflatzs14                 = flatzs0zssimpflatzs11;                /* read */
        flatzs0zssimpflatzs15                 = flatzs0zssimpflatzs12;                /* read */
        acczsperhapszsconvzs5zssimpflatzs4    = flatzs0zssimpflatzs13;                /* write */
        acczsperhapszsconvzs5zssimpflatzs5    = flatzs0zssimpflatzs14;                /* write */
        acczsperhapszsconvzs5zssimpflatzs6    = flatzs0zssimpflatzs15;                /* write */
    }
    
    s->has_0_0_acczsperhapszsconvzs5zssimpflatzs4 = itrue;                            /* save */
    s->res_0_0_acczsperhapszsconvzs5zssimpflatzs4 = acczsperhapszsconvzs5zssimpflatzs4; /* save */
    
    s->has_0_0_acczsperhapszsconvzs5zssimpflatzs5 = itrue;                            /* save */
    s->res_0_0_acczsperhapszsconvzs5zssimpflatzs5 = acczsperhapszsconvzs5zssimpflatzs5; /* save */
    
    s->has_0_0_acczsperhapszsconvzs5zssimpflatzs6 = itrue;                            /* save */
    s->res_0_0_acczsperhapszsconvzs5zssimpflatzs6 = acczsperhapszsconvzs5zssimpflatzs6; /* save */
    
    perhapszsconvzs5zssimpflatzs16            = acczsperhapszsconvzs5zssimpflatzs4;   /* read */
    perhapszsconvzs5zssimpflatzs17            = acczsperhapszsconvzs5zssimpflatzs5;   /* read */
    perhapszsconvzs5zssimpflatzs18            = acczsperhapszsconvzs5zssimpflatzs6;   /* read */
    s->replZCoutputzsixzs0                    = perhapszsconvzs5zssimpflatzs16;       /* output */
    s->replZCoutputzsixzs1                    = perhapszsconvzs5zssimpflatzs17;       /* output */
    s->replZCoutputzsixzs2                    = perhapszsconvzs5zssimpflatzs18;       /* output */
}

- C evaluation:
[homer, 5.0,marge, 3.0]

- Core evaluation:
[homer, 5.0,marge, 3.0]

> > 