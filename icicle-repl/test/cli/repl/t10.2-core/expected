welcome to iREPL
ok, loaded 38 functions from data/libs/prelude.icicle
ok, loaded test/cli/repl/data.psv, 13 rows
> -- Show everything
> ok, core is now on
ok, core-type is now on
ok, core-simp is now on
> > -- A rather complicated feature to convert to Avalanche
> - Core (simplified):
Program (conv$0 : (Sum Error Int), conv$1 : FactIdentifier, conv$2 : Time, conv$3 : SNAPSHOT_TIME, conv$4 : MaxMapSize)
Precomputations:


Streams:
  
  STREAM_FILTER
    PREDICATE: 
      
        let simp$0 = fst#@{(Sum Error Int), Time} conv$0
        let simp$1 = Sum_fold#@{(Error,Int)}@{(Sum Error Bool)} 
          (\reify$0$conv$5@{Error} left#@{Error, Bool} reify$0$conv$5) 
          (\reify$1$conv$6@{Int} right#@{Error, Bool} (gt#@{Int} reify$1$conv$6 (10@{Int}))) simp$0
         in Sum_fold#@{(Error,Bool)}@{Bool} 
          (\reify$2$conv$8@{Error} True@{Bool}) 
          (\reify$3$conv$9@{Bool} reify$3$conv$9) simp$1
    STREAMS:
      STREAM_FOLD (conv$11 : ((Sum Error Int), ((Sum Error Int), Time)))
        INIT:
          (Left ExceptNotAnError, (Left ExceptNotAnError, 1858-11-17T00:00:00Z))@{((Sum Error Int), ((Sum Error Int), Time))}
        KONS:
          
            let simp$2 = fst#@{(Sum Error Int), Time} conv$0
             in pair#@{(Sum Error Int), ((Sum Error Int), Time)} simp$2 conv$0
      
      STREAM_FOLD (c$conv$12 : (Sum Error Int))
        INIT:
          Right 0@{(Sum Error Int)}
        KONS:
          
            let simp$3 = fst#@{(Sum Error Int), ((Sum Error Int), Time)} conv$11
             in Sum_fold#@{(Error,Int)}@{(Sum Error Int)} 
              (\reify$6$conv$13@{Error} left#@{Error, Int} reify$6$conv$13) 
              (\reify$7$conv$14@{Int} Sum_fold#@{(Error,Int)}@{(Sum Error Int)} 
                (\reify$8$conv$18@{Error} left#@{Error, Int} reify$8$conv$18) 
                (\reify$9$conv$19@{Int} right#@{Error, Int} reify$9$conv$19) (Sum_fold#@{(Error,Int)}@{(Sum Error Int)} 
                (\reify$4$conv$15@{Error} left#@{Error, Int} reify$4$conv$15) 
                (\reify$5$conv$16@{Int} right#@{Error, Int} (add#@{Int} reify$5$conv$16 (1@{Int}))) c$conv$12)) simp$3
      
  STREAM_FOLD (conv$27 : Buf 3 (Sum Error Int))
    INIT:
      Buf []@{Buf 3 (Sum Error Int)}
    KONS:
      
        let simp$4 = fst#@{(Sum Error Int), Time} conv$0
         in Latest_push#@{Buf 3 (Sum Error Int)} conv$27 conv$1 simp$4
  

Postcomputations:
  conv$32              = Sum_fold#@{(Error,Int)}@{(Sum Error (Int, Array (Sum Error Int)))} 
                           (\reify$10$conv$22@{Error} 
                             let conv$23 = left#@{Error, (Int, Array (Sum Error Int))} reify$10$conv$22
                              in conv$23) 
                           (\reify$11$conv$24@{Int} 
                             let conv$28 = Latest_read#@{Array (Sum Error Int)} conv$27
                             let conv$29 = pair#@{Int, Array (Sum Error Int)} reify$11$conv$24 conv$28
                             let conv$30 = right#@{Error, (Int, Array (Sum Error Int))} conv$29
                              in conv$30) c$conv$12

Returning:
  repl                 = conv$32


- Core type:
[(repl
 ,(Sum Error (Int, Array (Sum Error Int))))]

- Core evaluation:
[homer, (5,[300,400,500])
,marge, (1,[0,10,20])]

> > -- Something involves the abstract buffer type
> - Core (simplified):
Program (conv$0 : (Sum Error Int), conv$1 : FactIdentifier, conv$2 : Time, conv$3 : SNAPSHOT_TIME, conv$4 : MaxMapSize)
Precomputations:


Streams:
  STREAM_FOLD (conv$5 : Map Time (Buf 2 ((Sum Error Int), Time)))
    INIT:
      Map []@{Map Time (Buf 2 ((Sum Error Int), Time))}
    KONS:
      
        let simp$0 = Latest_push#@{Buf 2 ((Sum Error Int), Time)} (Buf []@{Buf 2 ((Sum Error Int), Time)}) conv$1 conv$0
        let simp$1 = snd#@{(Sum Error Int), Time} conv$0
         in Map_insertOrUpdate#@{(Time,Buf 2 ((Sum Error Int), Time))} 
          (\conv$7@{Buf 2 ((Sum Error Int), Time)} Latest_push#@{Buf 2 ((Sum Error Int), Time)} conv$7 conv$1 conv$0) simp$0 simp$1 conv$5
  

Postcomputations:
  conv$40              = Map_fold#@{(Time,Buf 2 ((Sum Error Int), Time))}@{(Sum Error (Map Time Int))} 
                           (\conv$37@{(Sum Error (Map Time Int))} \conv$32@{Time} \conv$34@{Buf 2 ((Sum Error Int), Time)} Sum_fold#@{(Error,Map Time Int)}@{(Sum Error (Map Time Int))} 
                             (\conv$39@{Error} left#@{Error, Map Time Int} conv$39) 
                             (\conv$38@{Map Time Int} Sum_fold#@{(Error,Int)}@{(Sum Error (Map Time Int))} 
                               (\conv$39@{Error} left#@{Error, Map Time Int} conv$39) 
                               (\conv$35@{Int} right#@{Error, Map Time Int} (Map_insertOrUpdate#@{(Time,Int)} 
                                 (\conv$36@{Int} conv$36) conv$35 conv$32 conv$38)) (
                               let conv$11 = 
                                 let conv$6 = Latest_read#@{Array ((Sum Error Int), Time)} conv$34
                                  in Array_fold#@{((Sum Error Int), Time)}@{((Sum Error Int), (Sum Error Int))} 
                                   (\conv$10@{((Sum Error Int), (Sum Error Int))} \conv$9@{((Sum Error Int), Time)} 
                                     let conv$28 = snd#@{(Sum Error Int), (Sum Error Int)} conv$10
                                     let v$inline$0$conv$13 = fst#@{(Sum Error Int), Time} conv$9
                                      in pair#@{(Sum Error Int), (Sum Error Int)} v$inline$0$conv$13 (
                                       let s$conv$22 = Sum_fold#@{(Error,Int)}@{(Sum Error Int)} 
                                         (\reify$0$conv$15@{Error} left#@{Error, Int} reify$0$conv$15) 
                                         (\reify$1$conv$16@{Int} Sum_fold#@{(Error,Int)}@{(Sum Error Int)} 
                                           (\reify$2$conv$17@{Error} left#@{Error, Int} reify$2$conv$17) 
                                           (\reify$3$conv$18@{Int} right#@{Error, Int} (add#@{Int} reify$1$conv$16 reify$3$conv$18)) conv$28) v$inline$0$conv$13
                                        in s$conv$22)) ((Left ExceptNotAnError, Right 0)@{((Sum Error Int), (Sum Error Int))}) conv$6
                               let conv$31 = snd#@{(Sum Error Int), (Sum Error Int)} conv$11
                                in conv$31)) conv$37) (Right Map []@{(Sum Error (Map Time Int))}) conv$5

Returning:
  repl                 = conv$40


- Core type:
[(repl
 ,(Sum Error (Map Time Int)))]

- Core evaluation:
[homer, [(1989-12-17,100)
        ,(1990-01-01,200)
        ,(1994-01-01,300)
        ,(1999-01-01,400)
        ,(2010-01-01,500)]
,marge, [(1989-12-17,30)]]

> > > 