Queries will no longer be evaluated using the C evaluator.
Snapshot mode activated with a snapshot date of 2017-01-01.
Loaded dictionary with 5 inputs, 0 outputs, 70 functions.
Selected psv file as input: test/cli/repl/data.psv

  ██▓ ▄████▄   ██▓ ▄████▄   ██▓    ▓█████
 ▓██▒▒██▀ ▀█  ▓██▒▒██▀ ▀█  ▓██▒    ▓█   ▀
 ▒██▒▒▓█    ▄ ▒██▒▒▓█    ▄ ▒██░    ▒███
 ░██░▒▓▓▄ ▄██▒░██░▒▓▓▄ ▄██▒▒██░    ▒▓█  ▄
 ░██░▒ ▓███▀ ░░██░▒ ▓███▀ ░░██████▒░▒████▒
 ░▓  ░ ░▒ ▒  ░░▓  ░ ░▒ ▒  ░░ ▒░▓  ░░░ ▒░ ░
  ▒ ░  ░  ▒    ▒ ░  ░  ▒   ░ ░ ▒  ░ ░ ░  ░
  ▒ ░░         ▒ ░░          ░ ░ REPL ░
  ░  ░ ░       ░  ░ ░          ░  ░   ░  ░
     ░            ░
                  ░     :help for help

λ -- Enable C evaluation
λ Queries will be evaluated using the C evaluator.
λ The C will be shown during evaluation.
λ λ C
-

#line 1 "cluster state #0 - default:salary"

typedef struct {
    itime_t          convzm2;
    iint_t           new_count;
    ierror_t         *new_convzm0zmsimpflatzm41;
    iint_t           *new_convzm0zmsimpflatzm42;
    itime_t          *new_convzm0zmsimpflatzm43;
} input_defaultZCsalary_t;

typedef struct {
    /* runtime */
    anemone_mempool_t *mempool;
    iint_t           max_map_size;

    /* inputs */
    input_defaultZCsalary_t input;

    /* kernel 0:0 outputs */
    ierror_t         replZCoutputzsixzs0;
    ibool_t          replZCoutputzsixzs1;
    iint_t           replZCoutputzsixzs2;
    idouble_t        replZCoutputzsixzs3;
} icluster_0_t;

iint_t size_of_icluster_0 ()
{
    return sizeof (icluster_0_t);
}

#line 1 "kernel function #0 - default:salary icluster_0_kernel_0"
void icluster_0_kernel_0(icluster_0_t *s)
{
    ibool_t          perhapszmconvzm4zmavalzm0zmsimpflatzm10;
    iint_t           perhapszmconvzm4zmavalzm0zmsimpflatzm11;
    idouble_t        perhapszmconvzm4zmavalzm0zmsimpflatzm12;
    ierror_t         flatzm3zmsimpflatzm17;
    ibool_t          flatzm3zmsimpflatzm18;
    iint_t           flatzm3zmsimpflatzm19;
    idouble_t        flatzm3zmsimpflatzm32;
    ibool_t          flatzm3zmsimpflatzm30;
    iint_t           flatzm3zmsimpflatzm31;
    ierror_t         flatzm0zmsimpflatzm33;
    iint_t           flatzm0zmsimpflatzm35;
    ibool_t          flatzm0zmsimpflatzm34;
    idouble_t        flatzm0zmsimpflatzm36;
    ierror_t         flatzm3zmsimpflatzm29;
    idouble_t        flatzm3zmsimpflatzm20;
    ierror_t         flatzm0zmsimpflatzm13;
    idouble_t        flatzm0zmsimpflatzm16;
    iint_t           flatzm0zmsimpflatzm15;
    ibool_t          flatzm0zmsimpflatzm14;
    idouble_t        acczmperhapszmconvzm4zmsimpflatzm8;
    iint_t           acczmperhapszmconvzm4zmsimpflatzm7;
    ibool_t          acczmperhapszmconvzm4zmsimpflatzm6;
    ierror_t         acczmperhapszmconvzm4zmsimpflatzm5;
    ierror_t         perhapszmconvzm4zmsimpflatzm37;
    ibool_t          perhapszmconvzm4zmsimpflatzm38;
    iint_t           perhapszmconvzm4zmsimpflatzm39;
    idouble_t        perhapszmconvzm4zmsimpflatzm40;
    ierror_t         perhapszmconvzm4zmavalzm0zmsimpflatzm9;
    ibool_t          flatzm6zmsimpflatzm26;
    iint_t           flatzm6zmsimpflatzm27;
    idouble_t        flatzm6zmsimpflatzm24;
    ierror_t         flatzm6zmsimpflatzm25;
    ibool_t          flatzm6zmsimpflatzm22;
    iint_t           flatzm6zmsimpflatzm23;
    ierror_t         flatzm6zmsimpflatzm21;
    idouble_t        flatzm6zmsimpflatzm28;

    anemone_mempool_t *mempool                = s->mempool;
    itime_t          convzm2                  = s->input.convzm2;
    iint_t           convzm3                  = s->max_map_size;

    acczmperhapszmconvzm4zmsimpflatzm5        = ierror_not_an_error;                  /* init */
    acczmperhapszmconvzm4zmsimpflatzm6        = ifalse;                               /* init */
    acczmperhapszmconvzm4zmsimpflatzm7        = 0;                                    /* init */
    acczmperhapszmconvzm4zmsimpflatzm8        = 0.0;                                  /* init */
    
    const iint_t     new_count                = s->input.new_count;
    const ierror_t  *const new_convzm0zmsimpflatzm41 = s->input.new_convzm0zmsimpflatzm41;
    const iint_t    *const new_convzm0zmsimpflatzm42 = s->input.new_convzm0zmsimpflatzm42;
    const itime_t   *const new_convzm0zmsimpflatzm43 = s->input.new_convzm0zmsimpflatzm43;
    
    for (iint_t i = 0; i < new_count; i++) {
        itime_t          convzm1              = new_convzm0zmsimpflatzm43[i];
        ierror_t         convzm0zmsimpflatzm41 = new_convzm0zmsimpflatzm41[i];
        iint_t           convzm0zmsimpflatzm42 = new_convzm0zmsimpflatzm42[i];
        itime_t          convzm0zmsimpflatzm43 = new_convzm0zmsimpflatzm43[i];
        perhapszmconvzm4zmavalzm0zmsimpflatzm9 = acczmperhapszmconvzm4zmsimpflatzm5;  /* read */
        perhapszmconvzm4zmavalzm0zmsimpflatzm10 = acczmperhapszmconvzm4zmsimpflatzm6; /* read */
        perhapszmconvzm4zmavalzm0zmsimpflatzm11 = acczmperhapszmconvzm4zmsimpflatzm7; /* read */
        perhapszmconvzm4zmavalzm0zmsimpflatzm12 = acczmperhapszmconvzm4zmsimpflatzm8; /* read */
        flatzm0zmsimpflatzm13                 = ierror_not_an_error;                  /* init */
        flatzm0zmsimpflatzm14                 = ifalse;                               /* init */
        flatzm0zmsimpflatzm15                 = 0;                                    /* init */
        flatzm0zmsimpflatzm16                 = 0.0;                                  /* init */
        
        if (ierror_eq (perhapszmconvzm4zmavalzm0zmsimpflatzm9, ierror_not_an_error)) {
            flatzm3zmsimpflatzm17             = ierror_not_an_error;                  /* init */
            flatzm3zmsimpflatzm18             = ifalse;                               /* init */
            flatzm3zmsimpflatzm19             = 0;                                    /* init */
            flatzm3zmsimpflatzm20             = 0.0;                                  /* init */
            
            if (perhapszmconvzm4zmavalzm0zmsimpflatzm10) {
                iint_t           simpflatzm0  = idouble_trunc (perhapszmconvzm4zmavalzm0zmsimpflatzm12); /* let */
                iint_t           simpflatzm1  = iint_add (simpflatzm0, 1);            /* let */
                flatzm3zmsimpflatzm17         = ierror_not_an_error;                  /* write */
                flatzm3zmsimpflatzm18         = ifalse;                               /* write */
                flatzm3zmsimpflatzm19         = simpflatzm1;                          /* write */
                flatzm3zmsimpflatzm20         = 0.0;                                  /* write */
            } else {
                idouble_t        simpflatzm3  = iint_extend (perhapszmconvzm4zmavalzm0zmsimpflatzm11); /* let */
                idouble_t        convzm8      = idouble_add (simpflatzm3, 1.0);       /* let */
                flatzm6zmsimpflatzm21         = ierror_not_an_error;                  /* init */
                flatzm6zmsimpflatzm22         = ifalse;                               /* init */
                flatzm6zmsimpflatzm23         = 0;                                    /* init */
                flatzm6zmsimpflatzm24         = 0.0;                                  /* init */
                
                if (idouble_is_valid (convzm8)) {
                    flatzm6zmsimpflatzm21     = ierror_not_an_error;                  /* write */
                    flatzm6zmsimpflatzm22     = itrue;                                /* write */
                    flatzm6zmsimpflatzm23     = 0;                                    /* write */
                    flatzm6zmsimpflatzm24     = convzm8;                              /* write */
                } else {
                    flatzm6zmsimpflatzm21     = ierror_not_a_number;                  /* write */
                    flatzm6zmsimpflatzm22     = ifalse;                               /* write */
                    flatzm6zmsimpflatzm23     = 0;                                    /* write */
                    flatzm6zmsimpflatzm24     = 0.0;                                  /* write */
                }
                
                flatzm6zmsimpflatzm25         = flatzm6zmsimpflatzm21;                /* read */
                flatzm6zmsimpflatzm26         = flatzm6zmsimpflatzm22;                /* read */
                flatzm6zmsimpflatzm27         = flatzm6zmsimpflatzm23;                /* read */
                flatzm6zmsimpflatzm28         = flatzm6zmsimpflatzm24;                /* read */
                flatzm3zmsimpflatzm17         = flatzm6zmsimpflatzm25;                /* write */
                flatzm3zmsimpflatzm18         = flatzm6zmsimpflatzm26;                /* write */
                flatzm3zmsimpflatzm19         = flatzm6zmsimpflatzm27;                /* write */
                flatzm3zmsimpflatzm20         = flatzm6zmsimpflatzm28;                /* write */
            }
            
            flatzm3zmsimpflatzm29             = flatzm3zmsimpflatzm17;                /* read */
            flatzm3zmsimpflatzm30             = flatzm3zmsimpflatzm18;                /* read */
            flatzm3zmsimpflatzm31             = flatzm3zmsimpflatzm19;                /* read */
            flatzm3zmsimpflatzm32             = flatzm3zmsimpflatzm20;                /* read */
            flatzm0zmsimpflatzm13             = flatzm3zmsimpflatzm29;                /* write */
            flatzm0zmsimpflatzm14             = flatzm3zmsimpflatzm30;                /* write */
            flatzm0zmsimpflatzm15             = flatzm3zmsimpflatzm31;                /* write */
            flatzm0zmsimpflatzm16             = flatzm3zmsimpflatzm32;                /* write */
        } else {
            flatzm0zmsimpflatzm13             = perhapszmconvzm4zmavalzm0zmsimpflatzm9; /* write */
            flatzm0zmsimpflatzm14             = ifalse;                               /* write */
            flatzm0zmsimpflatzm15             = 0;                                    /* write */
            flatzm0zmsimpflatzm16             = 0.0;                                  /* write */
        }
        
        flatzm0zmsimpflatzm33                 = flatzm0zmsimpflatzm13;                /* read */
        flatzm0zmsimpflatzm34                 = flatzm0zmsimpflatzm14;                /* read */
        flatzm0zmsimpflatzm35                 = flatzm0zmsimpflatzm15;                /* read */
        flatzm0zmsimpflatzm36                 = flatzm0zmsimpflatzm16;                /* read */
        acczmperhapszmconvzm4zmsimpflatzm5    = flatzm0zmsimpflatzm33;                /* write */
        acczmperhapszmconvzm4zmsimpflatzm6    = flatzm0zmsimpflatzm34;                /* write */
        acczmperhapszmconvzm4zmsimpflatzm7    = flatzm0zmsimpflatzm35;                /* write */
        acczmperhapszmconvzm4zmsimpflatzm8    = flatzm0zmsimpflatzm36;                /* write */
    }
    
    perhapszmconvzm4zmsimpflatzm37            = acczmperhapszmconvzm4zmsimpflatzm5;   /* read */
    perhapszmconvzm4zmsimpflatzm38            = acczmperhapszmconvzm4zmsimpflatzm6;   /* read */
    perhapszmconvzm4zmsimpflatzm39            = acczmperhapszmconvzm4zmsimpflatzm7;   /* read */
    perhapszmconvzm4zmsimpflatzm40            = acczmperhapszmconvzm4zmsimpflatzm8;   /* read */
    s->replZCoutputzsixzs0                    = perhapszmconvzm4zmsimpflatzm37;       /* output */
    s->replZCoutputzsixzs1                    = perhapszmconvzm4zmsimpflatzm38;       /* output */
    s->replZCoutputzsixzs2                    = perhapszmconvzm4zmsimpflatzm39;       /* output */
    s->replZCoutputzsixzs3                    = perhapszmconvzm4zmsimpflatzm40;       /* output */
}

Core evaluation
---------------

homer|5.0
marge|3.0

C evaluation
------------

homer|5.0
marge|3.0

λ λ 